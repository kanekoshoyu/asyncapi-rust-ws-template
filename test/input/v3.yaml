asyncapi: 3.0.0
info:
  title: OKX Websocket API
  version: 2.0.0
  description: >-
    WebSocket endpoints are available for real-time data streaming on OKX  exchange.

  tags:
    - name: Trading Account
    - name: Order Book Trading
    - name: Spread Trading
    - name: Public Data
    - name: Trading Statistics
    - name: Funding Account
    - name: Sub-account
servers:
  Websocket Public Endpoints:
    host: ws.okx.com:8443
    pathname: /ws/v5/public
    protocol: wss
    description: Websocket Public API Request Data
  Websocket Private Endpoints:
    host: ws.okx.com:8443
    pathname: /ws/v5/private
    protocol: wss
    description: Websocket Private API Request Data
    security:
      - $ref: "#/components/securitySchemes/Auth"
  Websocket Business Endpoints:
    host: ws.okx.com:8443
    pathname: /ws/v5/business
    protocol: wss
    description: Websocket Business API Request Data
channels:
  Account:
    address: account
    description: Private WebSocket channel for operations.
    tags:
      - name: Trading Account
    messages:
      SubscriptionRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/SubscribeRequest"
      SubscriptionResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/SubscribeResponse"
      SubscriptionPushData:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/PushDataResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  Positions:
    description: Private WebSocket channel for operations.
    tags:
      - name: Trading Account
    messages:
      PositionRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/PositionRequest"
      PositionResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/PositionResponse"
      PositionPushDataResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/PositionPushDataResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  Balances:
    description: Private WebSocket channel for operations.
    tags:
      - name: Trading Account
    messages:
      BalanceRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/BalanceRequest"
      BalanceResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/BalanceResponse"
      BalancePushDataResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/BalancePushDataResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  PositionRisk:
    description: Private WebSocket channel for operations.
    tags:
      - name: Trading Account
    messages:
      PositionRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/RiskRequest"
      PositionResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/RiskResponse"
      PositionPushDataResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/RiskPushDataResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  Order:
    description: Private WebSocket channel for operations.
    tags:
      - name: Order Book Trading
    messages:
      OrderRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderRequest"
      OrderResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderResponse"
      OrderPushDataResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderPushDataResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  Fills:
    description: Private WebSocket channel for operations.
    tags:
      - name: Order Book Trading
    messages:
      FillsRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/FillsRequest"
      FillsResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/FillsResponse"
      FillsPushDataResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/FillsPushDataResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  PlaceOrder:
    description: Private WebSocket channel for operations.
    tags:
      - name: Order Book Trading
    messages:
      PlaceOrderRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/PlaceOrderRequest"
      PlaceOrderResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/PlaceOrderResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  PlaceMultipleOrder:
    description: Place multiple orders
    tags:
      - name: Order Book Trading
    messages:
      PlaceOrderRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/PlaceOrderRequest"
      PlaceOrderResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/PlaceOrderResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  CancelOrder:
    description: Cancel orders
    tags:
      - name: Order Book Trading
    messages:
      CancelOrderRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/CancelOrderRequest"
      CancelOrderResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/CancelOrderResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  CancelMultiOrder:
    description: Cancel multiple orders
    tags:
      - name: Order Book Trading
    messages:
      CancelOrderRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/CancelOrderRequest"
      CancelOrderResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/CancelOrderResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  AmendOrder:
    description: Amend orders
    tags:
      - name: Order Book Trading
    messages:
      AmendOrderRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AmendOrderRequest"
      AmendOrderResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AmendOrderResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  MassCancelOrder:
    description: Cancel all the MMP pending orders of an instrument family. Only applicable to Option in Portfolio Margin mode, and MMP privilege is required.
    tags:
      - name: Order Book Trading
    messages:
      MassCancelRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/MassCancelRequest"
      MassCancelResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/MassCancelResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  AlgoOrders:
    description: Retrieve algo orders (includes trigger order, oco order, conditional order). Data will not be pushed when first subscribed. Data will only be pushed when there are order updates.
    tags:
      - name: Order Book Trading
    messages:
      AlgoOrderRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrdersRequest"
      AlgoOrderCancelResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      AlgoOrderPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  AdvanceAlgoOrders:
    description: Retrieve advance algo orders (including Iceberg order, TWAP order, Trailing order). Data will be pushed when first subscribed. Data will be pushed when triggered by events such as placing/canceling order.
    tags:
      - name: Order Book Trading
    messages:
      AlgoOrderRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AdvanceAlgoOrdersRequest"
      AlgoOrderCancelResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      AlgoOrderPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  SpotGridOrders:
    description: Retrieve spot grid algo orders. Data will be pushed when triggered by events such as placing/canceling order. It will also be pushed in regular interval according to subscription granularity.
    tags:
      - name: Order Book Trading
    messages:
      SpotOrderRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AdvanceAlgoOrdersRequest"
      SpotOrderCancelResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      SpotOrderPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/SpotGridPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  ContractGridOrders:
    description: Retrieve contract grid algo orders. Data will be pushed when triggered by events such as placing/canceling order. It will also be pushed in regular interval according to subscription granularity.
    tags:
      - name: Order Book Trading
    messages:
      ContractOrderRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AdvanceAlgoOrdersRequest"
      ContractOrderCancelResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      ContractOrderPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ContractGridPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  GridPositionOrders:
    description: Retrieve contract grid positions. Data will be pushed when triggered by events such as placing/canceling order. Please ignore the empty data.
    tags:
      - name: Order Book Trading
    messages:
      GridPositionOrderRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AdvanceAlgoOrdersRequest"
      GridPositionOrderCancelResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      GridPositionOrderPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/GridPositionPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  GridSuborderOrders:
    description: Retrieve grid sub orders. Data will be pushed when triggered by events such as placing order. Please ignore the empty data.
    tags:
      - name: Order Book Trading
    messages:
      GridOrderRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AdvanceAlgoOrdersRequest"
      GridOrderCancelResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      GridOrderPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/GridSuborderPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  RecurringOrders:
    description: Retrieve recurring buy orders. Data will be pushed when triggered by events. It will also be pushed in regular interval according to subscription granularity.
    tags:
      - name: Order Book Trading
    messages:
      RecurringOrderRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AdvanceAlgoOrdersRequest"
      RecurringOrderCancelResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      RecurringOrderPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/RecurringOrderResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  CopyTrading:
    description: As a copy trader, receive push notification of copy trading.
    tags:
      - name: Order Book Trading
    messages:
      CopyTradingRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrdersRequest"
      CopyTradingResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      CopyTradingPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/CopyTradingResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"
  LeadTrading:
    description: The notification when failing to lead trade.
    tags:
      - name: Order Book Trading
    messages:
      LeadTradingRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrdersRequest"
      LeadTradingResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      LeadTradingPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/LeadTradingResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  Tickers:
    description: "Retrieve the last traded price, bid price, ask price and 24-hour trading volume of instruments.The fastest rate is 1 update/100ms. There will be no update if the event is not triggered. The events which can trigger update: trade, the change on best ask/bid."
    tags:
      - name: Order Book Trading
    messages:
      TickersRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/TickersRequest"
      TickersResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      TickersPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/TickersResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  CandleStick:
    description: "Retrieve the candlesticks data of an instrument. the push frequency is the fastest interval 1 second push the data."
    tags:
      - name: Order Book Trading
    messages:
      CandlestickRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/TickersRequest"
      CandlestickResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      CandlestickPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/CandleStickResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  Trades:
    description: "Retrieve the recent trades data. Data will be pushed whenever there is a trade. Every update may aggregate multiple trades.The message is sent only once per taker order, per filled price. The count field is used to represent the number of aggregated matches."
    tags:
      - name: Order Book Trading
    messages:
      TradingRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/TickersRequest"
      TradingResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      TradingPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/TradesResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  AllTrades:
    description: "Retrieve the recent trades data. Data will be pushed whenever there is a trade. Every update contain only one trade."
    tags:
      - name: Order Book Trading
    messages:
      AllTradesRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/TickersRequest"
      AllTradesResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      AllTradesPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AllTradesResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  OrderBook:
    description: "Retrieve order book data.<br>Use books for 400 depth levels, books5 for 5 depth levels, bbo-tbt tick-by-tick 1 depth level, books50-l2-tbt tick-by-tick 50 depth levels, and books-l2-tbt for tick-by-tick 400 depth levels.<br>books: 400 depth levels will be pushed in the initial full snapshot. Incremental data will be pushed every 100 ms for the changes in the order book during that period of time.<br>books5: 5 depth levels snapshot will be pushed in the initial push. Snapshot data will be pushed every 100 ms when there are changes in the 5 depth levels snapshot.<br>bbo-tbt: 1 depth level snapshot will be pushed in the initial push. Snapshot data will be pushed every 10 ms when there are changes in the 1 depth level snapshot.<br>books-l2-tbt: 400 depth levels will be pushed in the initial full snapshot. Incremental data will be pushed every 10 ms for the changes in the order book during that period of time.<br>books50-l2-tbt: 50 depth levels will be pushed in the initial full snapshot. Incremental data will be pushed every 10 ms for the changes in the order book during that period of time.<br>The push sequence for order book channels within the same connection and trading symbols is fixed as:<br>bbo-tbt -> books-l2-tbt -> books50-l2-tbt -> books -> books5.<br>Users can not simultaneously subscribe to books-l2-tbt and books50-l2-tbt/books"
    tags:
      - name: Order Book Trading
    messages:
      OrderbookRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/TickersRequest"
      OrderbookResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      OrderbookPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderbookResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  OptionTrades:
    description: "Retrieve the recent trades data. Data will be pushed whenever there is a trade. Every update contain only one trade."
    tags:
      - name: Order Book Trading
    messages:
      OptionTradesRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrdersRequest"
      OptionTradesResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      OptionTradesPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OptionTradesResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  Auction:
    description: "Retrieve call auction details."
    tags:
      - name: Order Book Trading
    messages:
      AuctionRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrdersRequest"
      AuctionResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      AuctionPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AuctionResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  PlaceOrderSpread:
    description: You can place an order only if you have sufficient funds.
    tags:
      - name: Spread Trading
    messages:
      SpreadOrderRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/SpreadOrderRequest"
      SpreadOrderResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      SpreadOrderPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/SpreadOrderResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  AmendOrderSpread:
    description: Amend an incomplete order.
    tags:
      - name: Spread Trading
    messages:
      SpreadAmendRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/SpreadAmendOrderRequest"
      SpreadAmendResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/SpreadAmendResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"
  CancelOrderSpread:
    description: cancel an order
    tags:
      - name: Spread Trading
    messages:
      SpreadCancelRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/SpreadCancelOrderRequest"
      SpreadCancelResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/SpreadAmendResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  CancelAllOrderSpread:
    description: cancel all orders
    tags:
      - name: Spread Trading
    messages:
      SpreadCancelRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/SpreadCancelAllRequest"
      SpreadCancelResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/SpreadCancelAllResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  OrderChannel:
    description: Private Order Channel
    tags:
      - name: Spread Trading
    messages:
      OrderChannelRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelRequest"
      OrderChannelResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelResponse"
      OrderChannelPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  TradeChannel:
    description: Private Trade Channel
    tags:
      - name: Spread Trading
    messages:
      TradeChannelRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelRequest"
      TradeChannelResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelResponse"
      TradeChannelPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/TradeChannelPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  OrderBookChannel:
    description: "Retrieve order book data. Available channels:<br>sprd-bbo-tbt: 1 depth level snapshot will be pushed in the initial push. Snapshot data will be pushed every 10 ms when there are changes in the 1 depth level snapshot.<br>sprd-books5: 5 depth levels snapshot will be pushed in the initial push. Snapshot data will be pushed every 100 ms when there are changes in the 5 depth levels snapshot.<br>sprd-books-l2-tbt: 400 depth levels will be pushed in the initial full snapshot. Incremental data will be pushed every 10 ms for the changes in the order book during that period of time.<br>The push sequence for order book channels within the same connection and trading symbols is fixed as: sprd-bbo-tbt -> sprd-books-l2-tbt -> sprd-books5."
    tags:
      - name: Spread Trading
    messages:
      OrderbookChannelRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelRequest"
      OrderbookChannelResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelResponse"
      OrderbookChannelPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderbookChannelPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  PublicTradeChannel:
    description: Retrieve the recent trades data from sprd-public-trades. Data will be pushed whenever there is a trade. Every update contains only one trade.
    tags:
      - name: Spread Trading
    messages:
      TradeChannelRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelRequest"
      TradeChannelResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelResponse"
      TradeChannelPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/PublicTradePushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  PublicTickersChannel:
    description: "Retrieve the last traded price, bid price, ask price. The fastest rate is 1 update/100ms. There will be no update if the event is not triggered. The events which can trigger update: trade, the change on best ask/bid price"
    tags:
      - name: Spread Trading
    messages:
      TickersChannelRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelRequest"
      TickersChannelResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelResponse"
      TickersChannelPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/PublicTickersPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  PublicCandlestickChannel:
    description: Retrieve the candlesticks data of an instrument. The push frequency is the fastest interval 1 second push the data.
    tags:
      - name: Spread Trading
    messages:
      CandlestickRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelRequest"
      CandlestickResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelResponse"
      CandlestickPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/PublicCandlestickPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  InstrumentsChannel:
    description: The instruments will be pushed if there is any change to the instrument’s state (such as delivery of FUTURES, exercise of OPTION, listing of new contracts / trading pairs, trading suspension, etc.)
    tags:
      - name: Public Data
    messages:
      InstrumentRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/InstrumentRequest"
      InstrumentResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelResponse"
      InstrumentPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/InstrumentPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  OpenInterestChannel:
    description: Retrieve the open interest. Data will be pushed every 3 seconds when there are updates.
    tags:
      - name: Public Data
    messages:
      OpenInterestRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelRequest"
      OpenInterestResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelResponse"
      OpenInterestPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OpenInterestPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  FundingRateChannel:
    description: "Retrieve funding rate. Data will be pushed in 30s to 90s."
    tags:
      - name: Public Data
    messages:
      FundingRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelRequest"
      FundingResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelResponse"
      FundingratePushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/FundingratePushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  PriceLimitChannel:
    description: "Retrieve the maximum buy price and minimum sell price of instruments. Data will be pushed every 200ms when there are changes in limits, and will not be pushed when there is no changes on limit."
    tags:
      - name: Public Data
    messages:
      PriceLimitRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelRequest"
      PriceLimitResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelResponse"
      PriceLimitPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/PriceLimitPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  OptionSummaryChannel:
    description: "Retrieve detailed pricing information of all OPTION contracts. Data will be pushed at once."
    tags:
      - name: Public Data
    messages:
      OptionRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelRequest"
      OptionResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OrderChannelResponse"
      OptionPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/OptionPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  PriceChannel:
    description: "Retrieve the estimated delivery/exercise price of SWAP, FUTURES and OPTION contracts.<br>Only the estimated delivery/exercise price will be pushed an hour before delivery/exercise, and will be pushed if there is any price change."
    tags:
      - name: Public Data
    messages:
      PriceRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/RiskRequest"
      PriceResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/RiskResponse"
      PricePushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/PricePushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  MarkPriceChannel:
    description: "Retrieve the mark price. Data will be pushed every 200 ms when the mark price changes, and will be pushed every 10 seconds when the mark price does not change."
    tags:
      - name: Public Data
    messages:
      MarkPriceRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrdersRequest"
      MarkPriceResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      MarkPricePushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/MarkPricePushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  IndexTickerChannel:
    description: "Retrieve index tickers data. Push data every 100ms if there are any changes, otherwise push once a minute."
    tags:
      - name: Public Data
    messages:
      IndexTickerRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrdersRequest"
      IndexTickerResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      IndexTickerPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/PublicTickersPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  MarkCandlestick:
    description: "Retrieve the candlesticks data of the mark price. The push frequency is the fastest interval 1 second push the data."
    tags:
      - name: Public Data
    messages:
      MarkCandlestickRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrdersRequest"
      MarkCandlestickResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      MarkCandlestickPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/PublicCandlestickPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  LiquidationOrders:
    description: "Retrieve the recent liquidation orders. For futures and swaps, each contract will only show a maximum of one order per one-second period. This data doesn’t represent the total number of liquidations on OKX."
    tags:
      - name: Public Data
    messages:
      LiquidationRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrdersRequest"
      LiquidationResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/LiquidationResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  ADL:
    description: "Auto-deleveraging warning channel.<br>In the normal state, data will be pushed once every minute to display the balance of insurance fund and etc.<br>In the warning state or when there is ADL risk (warning/adl), data will be pushed every second to display information such as the real-time decline rate of insurance fund."
    tags:
      - name: Public Data
    messages:
      ADLRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrdersRequest"
      ADLResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ADLResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  Calender:
    description: "Retrieve the most up-to-date economic calendar data. This endpoint is only applicable to VIP 1 and above users in the trading fee tier."
    tags:
      - name: Public Data
    messages:
      CalenderRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/CalendarRequest"
      CalenderResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/AlgoOrderResponse"
      CalenderPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/CalendarPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  Deposit:
    description: "A push notification is triggered when a deposit is initiated or the deposit status changes.<br>Supports subscriptions for accounts.<br>If it is a master account subscription, you can receive the push of the deposit info of both the master account and the sub-account.<br>If it is a sub-account subscription, only the push of sub-account deposit info you can receive."
    tags:
      - name: Funding Account
    messages:
      DepositRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/DepositRequest"
      DepositResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/DepositResponseData"
      DepositPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/DepositPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"

  Withdrawal:
    description: "A push notification is triggered when a withdrawal is initiated or the withdrawal status changes.<br>Supports subscriptions for accounts<br>If it is a master account subscription, you can receive the push of the withdrawal info of both the master account and the sub-account.<br>If it is a sub-account subscription, only the push of sub-account withdrawal info you can receive."
    tags:
      - name: Funding Account
    messages:
      withdrawRequest:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/DepositRequest"
      withdrawResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/DepositResponseData"
      withdrawPushResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/WithdrawPushResponse"
      ErrorResponse:
        contentType: application/json
        payload:
          $ref: "#/components/schemas/ErrorResponse"
operations:
  sendAccountSubscriptionRequest:
    action: send
    channel:
      $ref: "#/channels/Account"
    description: Sends a subscription request to the account channel.
    messages:
      - $ref: "#/channels/Account/messages/SubscriptionRequest"

  receiveAccountSubscriptionResponse:
    action: receive
    channel:
      $ref: "#/channels/Account"
    description: Receives a subscription response for the account channel.
    messages:
      - $ref: "#/channels/Account/messages/SubscriptionResponse"

  receiveAccountPushData:
    action: receive
    channel:
      $ref: "#/channels/Account"
    description: Receives push data for account updates.
    messages:
      - $ref: "#/channels/Account/messages/SubscriptionPushData"

  receiveAccountError:
    action: receive
    channel:
      $ref: "#/channels/Account"
    description: Receives error messages for the account channel.
    messages:
      - $ref: "#/channels/Account/messages/ErrorResponse"

  sendPositionRequest:
    action: send
    channel:
      $ref: "#/channels/Positions"
    description: Sends a request to the positions channel.
    messages:
      - $ref: "#/channels/Positions/messages/PositionRequest"

  receivePositionResponse:
    action: receive
    channel:
      $ref: "#/channels/Positions"
    description: Receives a response from the positions channel.
    messages:
      - $ref: "#/channels/Positions/messages/PositionResponse"

  receivePositionPushData:
    action: receive
    channel:
      $ref: "#/channels/Positions"
    description: Receives push data for positions updates.
    messages:
      - $ref: "#/channels/Positions/messages/PositionPushDataResponse"

  receivePositionError:
    action: receive
    channel:
      $ref: "#/channels/Positions"
    description: Receives error messages for the positions channel.
    messages:
      - $ref: "#/channels/Positions/messages/ErrorResponse"

  sendBalanceRequest:
    action: send
    channel:
      $ref: "#/channels/Balances"
    description: Sends a request to the balances channel.
    messages:
      - $ref: "#/channels/Balances/messages/BalanceRequest"

  receiveBalanceResponse:
    action: receive
    channel:
      $ref: "#/channels/Balances"
    description: Receives a response from the balances channel.
    messages:
      - $ref: "#/channels/Balances/messages/BalanceResponse"

  receiveBalancePushData:
    action: receive
    channel:
      $ref: "#/channels/Balances"
    description: Receives push data for balances updates.
    messages:
      - $ref: "#/channels/Balances/messages/BalancePushDataResponse"

  receiveBalanceError:
    action: receive
    channel:
      $ref: "#/channels/Balances"
    description: Receives error messages for the balances channel.
    messages:
      - $ref: "#/channels/Balances/messages/ErrorResponse"

  sendPositionRiskRequest:
    action: send
    channel:
      $ref: "#/channels/PositionRisk"
    description: Sends a request to the position risk channel.
    messages:
      - $ref: "#/channels/PositionRisk/messages/PositionRequest"

  receivePositionRiskResponse:
    action: receive
    channel:
      $ref: "#/channels/PositionRisk"
    description: Receives a response from the position risk channel.
    messages:
      - $ref: "#/channels/PositionRisk/messages/PositionResponse"

  receivePositionRiskPushData:
    action: receive
    channel:
      $ref: "#/channels/PositionRisk"
    description: Receives push data for position risk updates.
    messages:
      - $ref: "#/channels/PositionRisk/messages/PositionPushDataResponse"

  receivePositionRiskError:
    action: receive
    channel:
      $ref: "#/channels/PositionRisk"
    description: Receives error messages for the position risk channel.
    messages:
      - $ref: "#/channels/PositionRisk/messages/ErrorResponse"

  sendOrderRequest:
    action: send
    channel:
      $ref: "#/channels/Order"
    description: Sends a request to the order channel.
    messages:
      - $ref: "#/channels/Order/messages/OrderRequest"

  receiveOrderResponse:
    action: receive
    channel:
      $ref: "#/channels/Order"
    description: Receives a response from the order channel.
    messages:
      - $ref: "#/channels/Order/messages/OrderResponse"

  receiveOrderPushData:
    action: receive
    channel:
      $ref: "#/channels/Order"
    description: Receives push data for order updates.
    messages:
      - $ref: "#/channels/Order/messages/OrderPushDataResponse"

  receiveOrderError:
    action: receive
    channel:
      $ref: "#/channels/Order"
    description: Receives error messages for the order channel.
    messages:
      - $ref: "#/channels/Order/messages/ErrorResponse"

  sendFillsRequest:
    action: send
    channel:
      $ref: "#/channels/Fills"
    description: Sends a request to the fills channel.
    messages:
      - $ref: "#/channels/Fills/messages/FillsRequest"

  receiveFillsResponse:
    action: receive
    channel:
      $ref: "#/channels/Fills"
    description: Receives a response from the fills channel.
    messages:
      - $ref: "#/channels/Fills/messages/FillsResponse"

  receiveFillsPushData:
    action: receive
    channel:
      $ref: "#/channels/Fills"
    description: Receives push data for fills updates.
    messages:
      - $ref: "#/channels/Fills/messages/FillsPushDataResponse"

  receiveFillsError:
    action: receive
    channel:
      $ref: "#/channels/Fills"
    description: Receives error messages for the fills channel.
    messages:
      - $ref: "#/channels/Fills/messages/ErrorResponse"

  sendPlaceOrderRequest:
    action: send
    channel:
      $ref: "#/channels/PlaceOrder"
    description: Sends a request to the place order channel.
    messages:
      - $ref: "#/channels/PlaceOrder/messages/PlaceOrderRequest"

  receivePlaceOrderResponse:
    action: receive
    channel:
      $ref: "#/channels/PlaceOrder"
    description: Receives a response from the place order channel.
    messages:
      - $ref: "#/channels/PlaceOrder/messages/PlaceOrderResponse"

  receivePlaceOrderError:
    action: receive
    channel:
      $ref: "#/channels/PlaceOrder"
    description: Receives error messages for the place order channel.
    messages:
      - $ref: "#/channels/PlaceOrder/messages/ErrorResponse"

  sendPlaceMultipleOrderRequest:
    action: send
    channel:
      $ref: "#/channels/PlaceMultipleOrder"
    description: Sends a request to place multiple orders.
    messages:
      - $ref: "#/channels/PlaceMultipleOrder/messages/PlaceOrderRequest"

  receivePlaceMultipleOrderResponse:
    action: receive
    channel:
      $ref: "#/channels/PlaceMultipleOrder"
    description: Receives a response for placing multiple orders.
    messages:
      - $ref: "#/channels/PlaceMultipleOrder/messages/PlaceOrderResponse"

  receivePlaceMultipleOrderError:
    action: receive
    channel:
      $ref: "#/channels/PlaceMultipleOrder"
    description: Receives error messages for placing multiple orders.
    messages:
      - $ref: "#/channels/PlaceMultipleOrder/messages/ErrorResponse"

  sendCancelOrderRequest:
    action: send
    channel:
      $ref: "#/channels/CancelOrder"
    description: Sends a request to cancel orders.
    messages:
      - $ref: "#/channels/CancelOrder/messages/CancelOrderRequest"

  receiveCancelOrderResponse:
    action: receive
    channel:
      $ref: "#/channels/CancelOrder"
    description: Receives a response for canceling orders.
    messages:
      - $ref: "#/channels/CancelOrder/messages/CancelOrderResponse"

  receiveCancelOrderError:
    action: receive
    channel:
      $ref: "#/channels/CancelOrder"
    description: Receives error messages for canceling orders.
    messages:
      - $ref: "#/channels/CancelOrder/messages/ErrorResponse"
  sendCancelMultiOrderRequest:
    action: send
    channel:
      $ref: "#/channels/CancelMultiOrder"
    description: Sends a request to cancel multiple orders.
    messages:
      - $ref: "#/channels/CancelMultiOrder/messages/CancelOrderRequest"

  receiveCancelMultiOrderResponse:
    action: receive
    channel:
      $ref: "#/channels/CancelMultiOrder"
    description: Receives a response for canceling multiple orders.
    messages:
      - $ref: "#/channels/CancelMultiOrder/messages/CancelOrderResponse"

  receiveCancelMultiOrderError:
    action: receive
    channel:
      $ref: "#/channels/CancelMultiOrder"
    description: Receives error messages for canceling multiple orders.
    messages:
      - $ref: "#/channels/CancelMultiOrder/messages/ErrorResponse"

  sendAmendOrderRequest:
    action: send
    channel:
      $ref: "#/channels/AmendOrder"
    description: Sends a request to amend an order.
    messages:
      - $ref: "#/channels/AmendOrder/messages/AmendOrderRequest"

  receiveAmendOrderResponse:
    action: receive
    channel:
      $ref: "#/channels/AmendOrder"
    description: Receives a response for amending an order.
    messages:
      - $ref: "#/channels/AmendOrder/messages/AmendOrderResponse"

  receiveAmendOrderError:
    action: receive
    channel:
      $ref: "#/channels/AmendOrder"
    description: Receives error messages for amending an order.
    messages:
      - $ref: "#/channels/AmendOrder/messages/ErrorResponse"

  sendMassCancelOrderRequest:
    action: send
    channel:
      $ref: "#/channels/MassCancelOrder"
    description: Sends a request to cancel all MMP pending orders of an instrument family.
    messages:
      - $ref: "#/channels/MassCancelOrder/messages/MassCancelRequest"

  receiveMassCancelOrderResponse:
    action: receive
    channel:
      $ref: "#/channels/MassCancelOrder"
    description: Receives a response for canceling all MMP pending orders.
    messages:
      - $ref: "#/channels/MassCancelOrder/messages/MassCancelResponse"

  receiveMassCancelOrderError:
    action: receive
    channel:
      $ref: "#/channels/MassCancelOrder"
    description: Receives error messages for mass cancel orders.
    messages:
      - $ref: "#/channels/MassCancelOrder/messages/ErrorResponse"

  sendAlgoOrderRequest:
    action: send
    channel:
      $ref: "#/channels/AlgoOrders"
    description: Sends a request to subscribe to algo orders.
    messages:
      - $ref: "#/channels/AlgoOrders/messages/AlgoOrderRequest"

  receiveAlgoOrderCancelResponse:
    action: receive
    channel:
      $ref: "#/channels/AlgoOrders"
    description: Receives a cancel response for algo orders.
    messages:
      - $ref: "#/channels/AlgoOrders/messages/AlgoOrderCancelResponse"

  receiveAlgoOrderPushData:
    action: receive
    channel:
      $ref: "#/channels/AlgoOrders"
    description: Receives push data for algo order updates.
    messages:
      - $ref: "#/channels/AlgoOrders/messages/AlgoOrderPushResponse"

  receiveAlgoOrderError:
    action: receive
    channel:
      $ref: "#/channels/AlgoOrders"
    description: Receives error messages for algo orders.
    messages:
      - $ref: "#/channels/AlgoOrders/messages/ErrorResponse"

  sendAdvanceAlgoOrderRequest:
    action: send
    channel:
      $ref: "#/channels/AdvanceAlgoOrders"
    description: Sends a request to subscribe to advance algo orders.
    messages:
      - $ref: "#/channels/AdvanceAlgoOrders/messages/AlgoOrderRequest"

  receiveAdvanceAlgoOrderCancelResponse:
    action: receive
    channel:
      $ref: "#/channels/AdvanceAlgoOrders"
    description: Receives a cancel response for advance algo orders.
    messages:
      - $ref: "#/channels/AdvanceAlgoOrders/messages/AlgoOrderCancelResponse"

  receiveAdvanceAlgoOrderPushData:
    action: receive
    channel:
      $ref: "#/channels/AdvanceAlgoOrders"
    description: Receives push data for advance algo order updates.
    messages:
      - $ref: "#/channels/AdvanceAlgoOrders/messages/AlgoOrderPushResponse"

  receiveAdvanceAlgoOrderError:
    action: receive
    channel:
      $ref: "#/channels/AdvanceAlgoOrders"
    description: Receives error messages for advance algo orders.
    messages:
      - $ref: "#/channels/AdvanceAlgoOrders/messages/ErrorResponse"

  sendSpotGridOrderRequest:
    action: send
    channel:
      $ref: "#/channels/SpotGridOrders"
    description: Sends a request to subscribe to spot grid algo orders.
    messages:
      - $ref: "#/channels/SpotGridOrders/messages/SpotOrderRequest"

  receiveSpotGridOrderCancelResponse:
    action: receive
    channel:
      $ref: "#/channels/SpotGridOrders"
    description: Receives a cancel response for spot grid orders.
    messages:
      - $ref: "#/channels/SpotGridOrders/messages/SpotOrderCancelResponse"

  receiveSpotGridOrderPushData:
    action: receive
    channel:
      $ref: "#/channels/SpotGridOrders"
    description: Receives push data for spot grid order updates.
    messages:
      - $ref: "#/channels/SpotGridOrders/messages/SpotOrderPushResponse"

  receiveSpotGridOrderError:
    action: receive
    channel:
      $ref: "#/channels/SpotGridOrders"
    description: Receives error messages for spot grid orders.
    messages:
      - $ref: "#/channels/SpotGridOrders/messages/ErrorResponse"

  sendContractGridOrderRequest:
    action: send
    channel:
      $ref: "#/channels/ContractGridOrders"
    description: Sends a request to subscribe to contract grid algo orders.
    messages:
      - $ref: "#/channels/ContractGridOrders/messages/ContractOrderRequest"

  receiveContractGridOrderCancelResponse:
    action: receive
    channel:
      $ref: "#/channels/ContractGridOrders"
    description: Receives a cancel response for contract grid orders.
    messages:
      - $ref: "#/channels/ContractGridOrders/messages/ContractOrderCancelResponse"

  receiveContractGridOrderPushData:
    action: receive
    channel:
      $ref: "#/channels/ContractGridOrders"
    description: Receives push data for contract grid order updates.
    messages:
      - $ref: "#/channels/ContractGridOrders/messages/ContractOrderPushResponse"

  receiveContractGridOrderError:
    action: receive
    channel:
      $ref: "#/channels/ContractGridOrders"
    description: Receives error messages for contract grid orders.
    messages:
      - $ref: "#/channels/ContractGridOrders/messages/ErrorResponse"

  sendGridPositionOrderRequest:
    action: send
    channel:
      $ref: "#/channels/GridPositionOrders"
    description: Sends a request to subscribe to grid position orders.
    messages:
      - $ref: "#/channels/GridPositionOrders/messages/GridPositionOrderRequest"

  receiveGridPositionOrderCancelResponse:
    action: receive
    channel:
      $ref: "#/channels/GridPositionOrders"
    description: Receives a cancel response for grid position orders.
    messages:
      - $ref: "#/channels/GridPositionOrders/messages/GridPositionOrderCancelResponse"

  receiveGridPositionOrderPushData:
    action: receive
    channel:
      $ref: "#/channels/GridPositionOrders"
    description: Receives push data for grid position order updates.
    messages:
      - $ref: "#/channels/GridPositionOrders/messages/GridPositionOrderPushResponse"

  receiveGridPositionOrderError:
    action: receive
    channel:
      $ref: "#/channels/GridPositionOrders"
    description: Receives error messages for grid position orders.
    messages:
      - $ref: "#/channels/GridPositionOrders/messages/ErrorResponse"
  sendGridSuborderRequest:
    action: send
    channel:
      $ref: "#/channels/GridSuborderOrders"
    description: Sends a request to retrieve grid sub orders.
    messages:
      - $ref: "#/channels/GridSuborderOrders/messages/GridOrderRequest"

  receiveGridSuborderCancelResponse:
    action: receive
    channel:
      $ref: "#/channels/GridSuborderOrders"
    description: Receives a cancel response for grid sub orders.
    messages:
      - $ref: "#/channels/GridSuborderOrders/messages/GridOrderCancelResponse"

  receiveGridSuborderPushData:
    action: receive
    channel:
      $ref: "#/channels/GridSuborderOrders"
    description: Receives push data for grid sub order updates.
    messages:
      - $ref: "#/channels/GridSuborderOrders/messages/GridOrderPushResponse"

  receiveGridSuborderError:
    action: receive
    channel:
      $ref: "#/channels/GridSuborderOrders"
    description: Receives error messages for grid sub orders.
    messages:
      - $ref: "#/channels/GridSuborderOrders/messages/ErrorResponse"

  sendRecurringOrderRequest:
    action: send
    channel:
      $ref: "#/channels/RecurringOrders"
    description: Sends a request to retrieve recurring buy orders.
    messages:
      - $ref: "#/channels/RecurringOrders/messages/RecurringOrderRequest"

  receiveRecurringOrderCancelResponse:
    action: receive
    channel:
      $ref: "#/channels/RecurringOrders"
    description: Receives a cancel response for recurring buy orders.
    messages:
      - $ref: "#/channels/RecurringOrders/messages/RecurringOrderCancelResponse"

  receiveRecurringOrderPushData:
    action: receive
    channel:
      $ref: "#/channels/RecurringOrders"
    description: Receives push data for recurring buy order updates.
    messages:
      - $ref: "#/channels/RecurringOrders/messages/RecurringOrderPushResponse"

  receiveRecurringOrderError:
    action: receive
    channel:
      $ref: "#/channels/RecurringOrders"
    description: Receives error messages for recurring orders.
    messages:
      - $ref: "#/channels/RecurringOrders/messages/ErrorResponse"

  sendCopyTradingRequest:
    action: send
    channel:
      $ref: "#/channels/CopyTrading"
    description: Sends a request as a copy trader to receive notifications.
    messages:
      - $ref: "#/channels/CopyTrading/messages/CopyTradingRequest"

  receiveCopyTradingResponse:
    action: receive
    channel:
      $ref: "#/channels/CopyTrading"
    description: Receives a response for copy trading notifications.
    messages:
      - $ref: "#/channels/CopyTrading/messages/CopyTradingResponse"

  receiveCopyTradingPushData:
    action: receive
    channel:
      $ref: "#/channels/CopyTrading"
    description: Receives push notifications for copy trading.
    messages:
      - $ref: "#/channels/CopyTrading/messages/CopyTradingPushResponse"

  receiveCopyTradingError:
    action: receive
    channel:
      $ref: "#/channels/CopyTrading"
    description: Receives error messages for copy trading.
    messages:
      - $ref: "#/channels/CopyTrading/messages/ErrorResponse"

  sendLeadTradingRequest:
    action: send
    channel:
      $ref: "#/channels/LeadTrading"
    description: Sends a request for lead trading notifications.
    messages:
      - $ref: "#/channels/LeadTrading/messages/LeadTradingRequest"

  receiveLeadTradingResponse:
    action: receive
    channel:
      $ref: "#/channels/LeadTrading"
    description: Receives a response for lead trading notifications.
    messages:
      - $ref: "#/channels/LeadTrading/messages/LeadTradingResponse"

  receiveLeadTradingPushData:
    action: receive
    channel:
      $ref: "#/channels/LeadTrading"
    description: Receives push notifications for lead trading.
    messages:
      - $ref: "#/channels/LeadTrading/messages/LeadTradingPushResponse"

  receiveLeadTradingError:
    action: receive
    channel:
      $ref: "#/channels/LeadTrading"
    description: Receives error messages for lead trading.
    messages:
      - $ref: "#/channels/LeadTrading/messages/ErrorResponse"

  sendTickersRequest:
    action: send
    channel:
      $ref: "#/channels/Tickers"
    description: Sends a request to retrieve tickers data.
    messages:
      - $ref: "#/channels/Tickers/messages/TickersRequest"

  receiveTickersResponse:
    action: receive
    channel:
      $ref: "#/channels/Tickers"
    description: Receives a response for tickers data.
    messages:
      - $ref: "#/channels/Tickers/messages/TickersResponse"

  receiveTickersPushData:
    action: receive
    channel:
      $ref: "#/channels/Tickers"
    description: Receives push data for tickers updates.
    messages:
      - $ref: "#/channels/Tickers/messages/TickersPushResponse"

  receiveTickersError:
    action: receive
    channel:
      $ref: "#/channels/Tickers"
    description: Receives error messages for tickers.
    messages:
      - $ref: "#/channels/Tickers/messages/ErrorResponse"

  sendCandlestickRequest:
    action: send
    channel:
      $ref: "#/channels/CandleStick"
    description: Sends a request to retrieve candlestick data.
    messages:
      - $ref: "#/channels/CandleStick/messages/CandlestickRequest"

  receiveCandlestickResponse:
    action: receive
    channel:
      $ref: "#/channels/CandleStick"
    description: Receives a response for candlestick data.
    messages:
      - $ref: "#/channels/CandleStick/messages/CandlestickResponse"

  receiveCandlestickPushData:
    action: receive
    channel:
      $ref: "#/channels/CandleStick"
    description: Receives push data for candlestick updates.
    messages:
      - $ref: "#/channels/CandleStick/messages/CandlestickPushResponse"

  receiveCandlestickError:
    action: receive
    channel:
      $ref: "#/channels/CandleStick"
    description: Receives error messages for candlestick.
    messages:
      - $ref: "#/channels/CandleStick/messages/ErrorResponse"

  sendTradesRequest:
    action: send
    channel:
      $ref: "#/channels/Trades"
    description: Sends a request to retrieve recent trades data.
    messages:
      - $ref: "#/channels/Trades/messages/TradingRequest"

  receiveTradesResponse:
    action: receive
    channel:
      $ref: "#/channels/Trades"
    description: Receives a response for recent trades data.
    messages:
      - $ref: "#/channels/Trades/messages/TradingResponse"

  receiveTradesPushData:
    action: receive
    channel:
      $ref: "#/channels/Trades"
    description: Receives push data for trades updates.
    messages:
      - $ref: "#/channels/Trades/messages/TradingPushResponse"

  receiveTradesError:
    action: receive
    channel:
      $ref: "#/channels/Trades"
    description: Receives error messages for trades.
    messages:
      - $ref: "#/channels/Trades/messages/ErrorResponse"

  sendAllTradesRequest:
    action: send
    channel:
      $ref: "#/channels/AllTrades"
    description: Sends a request to retrieve all recent trades data.
    messages:
      - $ref: "#/channels/AllTrades/messages/AllTradesRequest"

  receiveAllTradesResponse:
    action: receive
    channel:
      $ref: "#/channels/AllTrades"
    description: Receives a response for all recent trades data.
    messages:
      - $ref: "#/channels/AllTrades/messages/AllTradesResponse"

  receiveAllTradesPushData:
    action: receive
    channel:
      $ref: "#/channels/AllTrades"
    description: Receives push data for all trades updates.
    messages:
      - $ref: "#/channels/AllTrades/messages/AllTradesPushResponse"

  receiveAllTradesError:
    action: receive
    channel:
      $ref: "#/channels/AllTrades"
    description: Receives error messages for all trades.
    messages:
      - $ref: "#/channels/AllTrades/messages/ErrorResponse"

  sendOrderBookRequest:
    action: send
    channel:
      $ref: "#/channels/OrderBook"
    description: Sends a request to retrieve order book data.
    messages:
      - $ref: "#/channels/OrderBook/messages/OrderbookRequest"

  receiveOrderBookResponse:
    action: receive
    channel:
      $ref: "#/channels/OrderBook"
    description: Receives a response for order book data.
    messages:
      - $ref: "#/channels/OrderBook/messages/OrderbookResponse"

  receiveOrderBookPushData:
    action: receive
    channel:
      $ref: "#/channels/OrderBook"
    description: Receives push data for order book updates.
    messages:
      - $ref: "#/channels/OrderBook/messages/OrderbookPushResponse"

  receiveOrderBookError:
    action: receive
    channel:
      $ref: "#/channels/OrderBook"
    description: Receives error messages for order book.
    messages:
      - $ref: "#/channels/OrderBook/messages/ErrorResponse"
  sendOptionTradesRequest:
    action: send
    channel:
      $ref: "#/channels/OptionTrades"
    description: Sends a request to retrieve recent trades data for options.
    messages:
      - $ref: "#/channels/OptionTrades/messages/OptionTradesRequest"

  receiveOptionTradesResponse:
    action: receive
    channel:
      $ref: "#/channels/OptionTrades"
    description: Receives a response for recent trades data for options.
    messages:
      - $ref: "#/channels/OptionTrades/messages/OptionTradesResponse"

  receiveOptionTradesPushData:
    action: receive
    channel:
      $ref: "#/channels/OptionTrades"
    description: Receives push data for recent trades of options.
    messages:
      - $ref: "#/channels/OptionTrades/messages/OptionTradesPushResponse"

  receiveOptionTradesError:
    action: receive
    channel:
      $ref: "#/channels/OptionTrades"
    description: Receives error messages for option trades.
    messages:
      - $ref: "#/channels/OptionTrades/messages/ErrorResponse"

  sendAuctionRequest:
    action: send
    channel:
      $ref: "#/channels/Auction"
    description: Sends a request to retrieve call auction details.
    messages:
      - $ref: "#/channels/Auction/messages/AuctionRequest"

  receiveAuctionResponse:
    action: receive
    channel:
      $ref: "#/channels/Auction"
    description: Receives a response for call auction details.
    messages:
      - $ref: "#/channels/Auction/messages/AuctionResponse"

  receiveAuctionPushData:
    action: receive
    channel:
      $ref: "#/channels/Auction"
    description: Receives push data for call auction updates.
    messages:
      - $ref: "#/channels/Auction/messages/AuctionPushResponse"

  receiveAuctionError:
    action: receive
    channel:
      $ref: "#/channels/Auction"
    description: Receives error messages for call auctions.
    messages:
      - $ref: "#/channels/Auction/messages/ErrorResponse"

  sendPlaceOrderSpreadRequest:
    action: send
    channel:
      $ref: "#/channels/PlaceOrderSpread"
    description: Sends a request to place an order with sufficient funds.
    messages:
      - $ref: "#/channels/PlaceOrderSpread/messages/SpreadOrderRequest"

  receivePlaceOrderSpreadResponse:
    action: receive
    channel:
      $ref: "#/channels/PlaceOrderSpread"
    description: Receives a response for placing an order with sufficient funds.
    messages:
      - $ref: "#/channels/PlaceOrderSpread/messages/SpreadOrderResponse"

  receivePlaceOrderSpreadPushData:
    action: receive
    channel:
      $ref: "#/channels/PlaceOrderSpread"
    description: Receives push data for placed order updates.
    messages:
      - $ref: "#/channels/PlaceOrderSpread/messages/SpreadOrderPushResponse"

  receivePlaceOrderSpreadError:
    action: receive
    channel:
      $ref: "#/channels/PlaceOrderSpread"
    description: Receives error messages for placed orders.
    messages:
      - $ref: "#/channels/PlaceOrderSpread/messages/ErrorResponse"

  sendAmendOrderSpreadRequest:
    action: send
    channel:
      $ref: "#/channels/AmendOrderSpread"
    description: Sends a request to amend an incomplete order.
    messages:
      - $ref: "#/channels/AmendOrderSpread/messages/SpreadAmendRequest"

  receiveAmendOrderSpreadResponse:
    action: receive
    channel:
      $ref: "#/channels/AmendOrderSpread"
    description: Receives a response for amending an incomplete order.
    messages:
      - $ref: "#/channels/AmendOrderSpread/messages/SpreadAmendResponse"

  receiveAmendOrderSpreadError:
    action: receive
    channel:
      $ref: "#/channels/AmendOrderSpread"
    description: Receives error messages for amending orders.
    messages:
      - $ref: "#/channels/AmendOrderSpread/messages/ErrorResponse"

  sendCancelOrderSpreadRequest:
    action: send
    channel:
      $ref: "#/channels/CancelOrderSpread"
    description: Sends a request to cancel an order.
    messages:
      - $ref: "#/channels/CancelOrderSpread/messages/SpreadCancelRequest"

  receiveCancelOrderSpreadResponse:
    action: receive
    channel:
      $ref: "#/channels/CancelOrderSpread"
    description: Receives a response for canceling an order.
    messages:
      - $ref: "#/channels/CancelOrderSpread/messages/SpreadCancelResponse"

  receiveCancelOrderSpreadError:
    action: receive
    channel:
      $ref: "#/channels/CancelOrderSpread"
    description: Receives error messages for canceling orders.
    messages:
      - $ref: "#/channels/CancelOrderSpread/messages/ErrorResponse"

  sendCancelAllOrderSpreadRequest:
    action: send
    channel:
      $ref: "#/channels/CancelAllOrderSpread"
    description: Sends a request to cancel all orders.
    messages:
      - $ref: "#/channels/CancelAllOrderSpread/messages/SpreadCancelRequest"

  receiveCancelAllOrderSpreadResponse:
    action: receive
    channel:
      $ref: "#/channels/CancelAllOrderSpread"
    description: Receives a response for canceling all orders.
    messages:
      - $ref: "#/channels/CancelAllOrderSpread/messages/SpreadCancelResponse"

  receiveCancelAllOrderSpreadError:
    action: receive
    channel:
      $ref: "#/channels/CancelAllOrderSpread"
    description: Receives error messages for canceling all orders.
    messages:
      - $ref: "#/channels/CancelAllOrderSpread/messages/ErrorResponse"

  sendOrderChannelRequest:
    action: send
    channel:
      $ref: "#/channels/OrderChannel"
    description: Sends a request for private order channel data.
    messages:
      - $ref: "#/channels/OrderChannel/messages/OrderChannelRequest"

  receiveOrderChannelResponse:
    action: receive
    channel:
      $ref: "#/channels/OrderChannel"
    description: Receives a response for private order channel data.
    messages:
      - $ref: "#/channels/OrderChannel/messages/OrderChannelResponse"

  receiveOrderChannelPushData:
    action: receive
    channel:
      $ref: "#/channels/OrderChannel"
    description: Receives push data for private order channel updates.
    messages:
      - $ref: "#/channels/OrderChannel/messages/OrderChannelPushResponse"

  receiveOrderChannelError:
    action: receive
    channel:
      $ref: "#/channels/OrderChannel"
    description: Receives error messages for private order channel.
    messages:
      - $ref: "#/channels/OrderChannel/messages/ErrorResponse"

  sendTradeChannelRequest:
    action: send
    channel:
      $ref: "#/channels/TradeChannel"
    description: Sends a request for private trade channel data.
    messages:
      - $ref: "#/channels/TradeChannel/messages/TradeChannelRequest"

  receiveTradeChannelResponse:
    action: receive
    channel:
      $ref: "#/channels/TradeChannel"
    description: Receives a response for private trade channel data.
    messages:
      - $ref: "#/channels/TradeChannel/messages/TradeChannelResponse"

  receiveTradeChannelPushData:
    action: receive
    channel:
      $ref: "#/channels/TradeChannel"
    description: Receives push data for private trade channel updates.
    messages:
      - $ref: "#/channels/TradeChannel/messages/TradeChannelPushResponse"

  receiveTradeChannelError:
    action: receive
    channel:
      $ref: "#/channels/TradeChannel"
    description: Receives error messages for private trade channel.
    messages:
      - $ref: "#/channels/TradeChannel/messages/ErrorResponse"
  sendInstrumentRequest:
    action: send
    channel:
      $ref: "#/channels/InstrumentsChannel"
    description: Sends a request for instrument updates.
    messages:
      - $ref: "#/channels/InstrumentsChannel/messages/InstrumentRequest"

  receiveInstrumentResponse:
    action: receive
    channel:
      $ref: "#/channels/InstrumentsChannel"
    description: Receives a response for instrument updates.
    messages:
      - $ref: "#/channels/InstrumentsChannel/messages/InstrumentResponse"

  receiveInstrumentPushData:
    action: receive
    channel:
      $ref: "#/channels/InstrumentsChannel"
    description: Receives push data for instrument updates.
    messages:
      - $ref: "#/channels/InstrumentsChannel/messages/InstrumentPushResponse"

  receiveInstrumentError:
    action: receive
    channel:
      $ref: "#/channels/InstrumentsChannel"
    description: Receives error messages for instrument updates.
    messages:
      - $ref: "#/channels/InstrumentsChannel/messages/ErrorResponse"

  sendOpenInterestRequest:
    action: send
    channel:
      $ref: "#/channels/OpenInterestChannel"
    description: Sends a request to retrieve open interest updates.
    messages:
      - $ref: "#/channels/OpenInterestChannel/messages/OpenInterestRequest"

  receiveOpenInterestResponse:
    action: receive
    channel:
      $ref: "#/channels/OpenInterestChannel"
    description: Receives a response for open interest updates.
    messages:
      - $ref: "#/channels/OpenInterestChannel/messages/OpenInterestResponse"

  receiveOpenInterestPushData:
    action: receive
    channel:
      $ref: "#/channels/OpenInterestChannel"
    description: Receives push data for open interest updates.
    messages:
      - $ref: "#/channels/OpenInterestChannel/messages/OpenInterestPushResponse"

  receiveOpenInterestError:
    action: receive
    channel:
      $ref: "#/channels/OpenInterestChannel"
    description: Receives error messages for open interest updates.
    messages:
      - $ref: "#/channels/OpenInterestChannel/messages/ErrorResponse"

  sendFundingRateRequest:
    action: send
    channel:
      $ref: "#/channels/FundingRateChannel"
    description: Sends a request to retrieve funding rate updates.
    messages:
      - $ref: "#/channels/FundingRateChannel/messages/FundingRequest"

  receiveFundingRateResponse:
    action: receive
    channel:
      $ref: "#/channels/FundingRateChannel"
    description: Receives a response for funding rate updates.
    messages:
      - $ref: "#/channels/FundingRateChannel/messages/FundingResponse"

  receiveFundingRatePushData:
    action: receive
    channel:
      $ref: "#/channels/FundingRateChannel"
    description: Receives push data for funding rate updates.
    messages:
      - $ref: "#/channels/FundingRateChannel/messages/FundingratePushResponse"

  receiveFundingRateError:
    action: receive
    channel:
      $ref: "#/channels/FundingRateChannel"
    description: Receives error messages for funding rate updates.
    messages:
      - $ref: "#/channels/FundingRateChannel/messages/ErrorResponse"

  sendPriceLimitRequest:
    action: send
    channel:
      $ref: "#/channels/PriceLimitChannel"
    description: Sends a request to retrieve price limit updates.
    messages:
      - $ref: "#/channels/PriceLimitChannel/messages/PriceLimitRequest"

  receivePriceLimitResponse:
    action: receive
    channel:
      $ref: "#/channels/PriceLimitChannel"
    description: Receives a response for price limit updates.
    messages:
      - $ref: "#/channels/PriceLimitChannel/messages/PriceLimitResponse"

  receivePriceLimitPushData:
    action: receive
    channel:
      $ref: "#/channels/PriceLimitChannel"
    description: Receives push data for price limit updates.
    messages:
      - $ref: "#/channels/PriceLimitChannel/messages/PriceLimitPushResponse"

  receivePriceLimitError:
    action: receive
    channel:
      $ref: "#/channels/PriceLimitChannel"
    description: Receives error messages for price limit updates.
    messages:
      - $ref: "#/channels/PriceLimitChannel/messages/ErrorResponse"

  sendOptionSummaryRequest:
    action: send
    channel:
      $ref: "#/channels/OptionSummaryChannel"
    description: Sends a request to retrieve detailed option pricing information.
    messages:
      - $ref: "#/channels/OptionSummaryChannel/messages/OptionRequest"

  receiveOptionSummaryResponse:
    action: receive
    channel:
      $ref: "#/channels/OptionSummaryChannel"
    description: Receives a response for detailed option pricing information.
    messages:
      - $ref: "#/channels/OptionSummaryChannel/messages/OptionResponse"

  receiveOptionSummaryPushData:
    action: receive
    channel:
      $ref: "#/channels/OptionSummaryChannel"
    description: Receives push data for detailed option pricing information.
    messages:
      - $ref: "#/channels/OptionSummaryChannel/messages/OptionPushResponse"

  receiveOptionSummaryError:
    action: receive
    channel:
      $ref: "#/channels/OptionSummaryChannel"
    description: Receives error messages for option summary updates.
    messages:
      - $ref: "#/channels/OptionSummaryChannel/messages/ErrorResponse"

  sendPriceChannelRequest:
    action: send
    channel:
      $ref: "#/channels/PriceChannel"
    description: Sends a request to retrieve estimated delivery/exercise price updates.
    messages:
      - $ref: "#/channels/PriceChannel/messages/PriceRequest"

  receivePriceChannelResponse:
    action: receive
    channel:
      $ref: "#/channels/PriceChannel"
    description: Receives a response for estimated delivery/exercise price updates.
    messages:
      - $ref: "#/channels/PriceChannel/messages/PriceResponse"

  receivePriceChannelPushData:
    action: receive
    channel:
      $ref: "#/channels/PriceChannel"
    description: Receives push data for estimated delivery/exercise price updates.
    messages:
      - $ref: "#/channels/PriceChannel/messages/PricePushResponse"

  receivePriceChannelError:
    action: receive
    channel:
      $ref: "#/channels/PriceChannel"
    description: Receives error messages for price updates.
    messages:
      - $ref: "#/channels/PriceChannel/messages/ErrorResponse"

  sendMarkPriceRequest:
    action: send
    channel:
      $ref: "#/channels/MarkPriceChannel"
    description: Sends a request to retrieve mark price updates.
    messages:
      - $ref: "#/channels/MarkPriceChannel/messages/MarkPriceRequest"

  receiveMarkPriceResponse:
    action: receive
    channel:
      $ref: "#/channels/MarkPriceChannel"
    description: Receives a response for mark price updates.
    messages:
      - $ref: "#/channels/MarkPriceChannel/messages/MarkPriceResponse"

  receiveMarkPricePushData:
    action: receive
    channel:
      $ref: "#/channels/MarkPriceChannel"
    description: Receives push data for mark price updates.
    messages:
      - $ref: "#/channels/MarkPriceChannel/messages/MarkPricePushResponse"

  receiveMarkPriceError:
    action: receive
    channel:
      $ref: "#/channels/MarkPriceChannel"
    description: Receives error messages for mark price updates.
    messages:
      - $ref: "#/channels/MarkPriceChannel/messages/ErrorResponse"

  sendIndexTickerRequest:
    action: send
    channel:
      $ref: "#/channels/IndexTickerChannel"
    description: Sends a request to retrieve index ticker updates.
    messages:
      - $ref: "#/channels/IndexTickerChannel/messages/IndexTickerRequest"

  receiveIndexTickerResponse:
    action: receive
    channel:
      $ref: "#/channels/IndexTickerChannel"
    description: Receives a response for index ticker updates.
    messages:
      - $ref: "#/channels/IndexTickerChannel/messages/IndexTickerResponse"

  receiveIndexTickerPushData:
    action: receive
    channel:
      $ref: "#/channels/IndexTickerChannel"
    description: Receives push data for index ticker updates.
    messages:
      - $ref: "#/channels/IndexTickerChannel/messages/IndexTickerPushResponse"

  receiveIndexTickerError:
    action: receive
    channel:
      $ref: "#/channels/IndexTickerChannel"
    description: Receives error messages for index ticker updates.
    messages:
      - $ref: "#/channels/IndexTickerChannel/messages/ErrorResponse"

  sendMarkCandlestickRequest:
    action: send
    channel:
      $ref: "#/channels/MarkCandlestick"
    description: Sends a request to retrieve candlestick data of the mark price.
    messages:
      - $ref: "#/channels/MarkCandlestick/messages/MarkCandlestickRequest"

  receiveMarkCandlestickResponse:
    action: receive
    channel:
      $ref: "#/channels/MarkCandlestick"
    description: Receives a response for candlestick data of the mark price.
    messages:
      - $ref: "#/channels/MarkCandlestick/messages/MarkCandlestickResponse"

  receiveMarkCandlestickPushData:
    action: receive
    channel:
      $ref: "#/channels/MarkCandlestick"
    description: Receives push data for candlestick updates of the mark price.
    messages:
      - $ref: "#/channels/MarkCandlestick/messages/MarkCandlestickPushResponse"

  receiveMarkCandlestickError:
    action: receive
    channel:
      $ref: "#/channels/MarkCandlestick"
    description: Receives error messages for candlestick updates of the mark price.
    messages:
      - $ref: "#/channels/MarkCandlestick/messages/ErrorResponse"

  sendLiquidationOrdersRequest:
    action: send
    channel:
      $ref: "#/channels/LiquidationOrders"
    description: Sends a request to retrieve recent liquidation orders.
    messages:
      - $ref: "#/channels/LiquidationOrders/messages/LiquidationRequest"

  receiveLiquidationOrdersResponse:
    action: receive
    channel:
      $ref: "#/channels/LiquidationOrders"
    description: Receives a response for recent liquidation orders.
    messages:
      - $ref: "#/channels/LiquidationOrders/messages/LiquidationResponse"

  receiveLiquidationOrdersError:
    action: receive
    channel:
      $ref: "#/channels/LiquidationOrders"
    description: Receives error messages for liquidation orders.
    messages:
      - $ref: "#/channels/LiquidationOrders/messages/ErrorResponse"

  sendADLRequest:
    action: send
    channel:
      $ref: "#/channels/ADL"
    description: Sends a request for auto-deleveraging warning updates.
    messages:
      - $ref: "#/channels/ADL/messages/ADLRequest"

  receiveADLResponse:
    action: receive
    channel:
      $ref: "#/channels/ADL"
    description: Receives a response for auto-deleveraging warning updates.
    messages:
      - $ref: "#/channels/ADL/messages/ADLResponse"

  receiveADLError:
    action: receive
    channel:
      $ref: "#/channels/ADL"
    description: Receives error messages for auto-deleveraging updates.
    messages:
      - $ref: "#/channels/ADL/messages/ErrorResponse"
  sendCalendarRequest:
    action: send
    channel:
      $ref: "#/channels/Calender"
    description: Sends a request to retrieve the economic calendar data.
    messages:
      - $ref: "#/channels/Calender/messages/CalenderRequest"

  receiveCalendarResponse:
    action: receive
    channel:
      $ref: "#/channels/Calender"
    description: Receives a response for economic calendar data.
    messages:
      - $ref: "#/channels/Calender/messages/CalenderResponse"

  receiveCalendarPushData:
    action: receive
    channel:
      $ref: "#/channels/Calender"
    description: Receives push data for economic calendar updates.
    messages:
      - $ref: "#/channels/Calender/messages/CalenderPushResponse"

  receiveCalendarError:
    action: receive
    channel:
      $ref: "#/channels/Calender"
    description: Receives error messages for economic calendar updates.
    messages:
      - $ref: "#/channels/Calender/messages/ErrorResponse"

  sendDepositRequest:
    action: send
    channel:
      $ref: "#/channels/Deposit"
    description: Sends a request to retrieve deposit updates.
    messages:
      - $ref: "#/channels/Deposit/messages/DepositRequest"

  receiveDepositResponse:
    action: receive
    channel:
      $ref: "#/channels/Deposit"
    description: Receives a response for deposit updates.
    messages:
      - $ref: "#/channels/Deposit/messages/DepositResponse"

  receiveDepositPushData:
    action: receive
    channel:
      $ref: "#/channels/Deposit"
    description: Receives push data for deposit updates.
    messages:
      - $ref: "#/channels/Deposit/messages/DepositPushResponse"

  receiveDepositError:
    action: receive
    channel:
      $ref: "#/channels/Deposit"
    description: Receives error messages for deposit updates.
    messages:
      - $ref: "#/channels/Deposit/messages/ErrorResponse"

  sendWithdrawalRequest:
    action: send
    channel:
      $ref: "#/channels/Withdrawal"
    description: Sends a request to retrieve withdrawal updates.
    messages:
      - $ref: "#/channels/Withdrawal/messages/withdrawRequest"

  receiveWithdrawalResponse:
    action: receive
    channel:
      $ref: "#/channels/Withdrawal"
    description: Receives a response for withdrawal updates.
    messages:
      - $ref: "#/channels/Withdrawal/messages/withdrawResponse"

  receiveWithdrawalPushData:
    action: receive
    channel:
      $ref: "#/channels/Withdrawal"
    description: Receives push data for withdrawal updates.
    messages:
      - $ref: "#/channels/Withdrawal/messages/withdrawPushResponse"

  receiveWithdrawalError:
    action: receive
    channel:
      $ref: "#/channels/Withdrawal"
    description: Receives error messages for withdrawal updates.
    messages:
      - $ref: "#/channels/Withdrawal/messages/ErrorResponse"
components:
  securitySchemes:
    Auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Args:
      type: object
      properties:
        channel:
          type: string
          description: Name of the channel.

        ccy:
          type: string
          description: Currency (optional).
        extraParams:
          $ref: "#/components/schemas/ExtraParams"

    ExtraParams:
      type: object
      description: Additional configuration.
      properties:
        updateInterval:
          type: integer
          description: Update interval. `0` for only account events.
          example: 0

    Data:
      type: object
      properties:
        uTime:
          type: string
          format: date-time
          description: Latest account info time (Unix timestamp).
        totalEq:
          type: string
          description: Total equity in USD.
        details:
          type: array
          items:
            $ref: "#/components/schemas/Details"

    Details:
      type: object
      properties:
        ccy:
          type: string
          description: Currency.
        eq:
          type: string
          description: Equity of the currency.

    Arg:
      type: object
      properties:
        channel:
          type: string
          description: Channel name.
        uid:
          type: string
          description: User Identifier.
        data:
          type: array
          items:
            $ref: "#/components/schemas/PushDataDetails"

    PushDataDetails:
      type: object
      properties:
        uTime:
          type: string
          description: The latest time to get account information (millisecond Unix timestamp).
        totalEq:
          type: string
          description: The total amount of equity in USD.
        isoEq:
          type: string
          description: Isolated margin equity in USD (Applicable to Spot and futures mode/Multi-currency margin/Portfolio margin).
        adjEq:
          type: string
          description: Adjusted / Effective equity in USD.
        ordFroz:
          type: string
          description: Margin frozen for pending cross orders in USD (Only applicable to Spot mode/Multi-currency margin).
        imr:
          type: string
          description: Initial margin requirement in USD (Applicable to Spot mode/Multi-currency margin/Portfolio margin).
        mmr:
          type: string
          description: Maintenance margin requirement in USD (Applicable to Spot mode/Multi-currency margin/Portfolio margin).
        borrowFroz:
          type: string
          description: Potential borrowing IMR of the account in USD (Only applicable to Spot mode/Multi-currency margin/Portfolio margin).
        mgnRatio:
          type: string
          description: Margin ratio in USD (Applicable to Spot mode/Multi-currency margin/Portfolio margin).
        notionalUsd:
          type: string
          description: Notional value of positions in USD (Applicable to Spot mode/Multi-currency margin/Portfolio margin).
        upl:
          type: string
          description: Cross-margin info of unrealized profit and loss at the account level in USD (Applicable to Multi-currency margin/Portfolio margin).
        details:
          type: array
          items:
            $ref: "#/components/schemas/PushDetails"

    PushDetails:
      type: object
      properties:
        ccy:
          type: string
          description: Currency.
        eq:
          type: string
          description: Equity of currency.
        cashBal:
          type: string
          description: Cash Balance.
        uTime:
          type: string
          description: Update time (Unix timestamp format in milliseconds).
        isoEq:
          type: string
          description: Isolated margin equity of currency (Applicable to Spot and futures mode/Multi-currency margin/Portfolio margin).
        availEq:
          type: string
          description: Available equity of currency (Applicable to Spot and futures mode/Multi-currency margin/Portfolio margin).
        disEq:
          type: string
          description: Discount equity of currency in USD.
        fixedBal:
          type: string
          description: Frozen balance for Dip Sniper and Peak Sniper.
        availBal:
          type: string
          description: Available balance of currency.
        frozenBal:
          type: string
          description: Frozen balance of currency.
        ordFrozen:
          type: string
          description: Margin frozen for open orders (Applicable to Spot mode/Spot and futures mode/Multi-currency margin).
        liab:
          type: string
          description: Liabilities of currency (positive value).
        upl:
          type: string
          description: Unrealized profit & loss of all margin and derivatives positions in currency.
        uplLiab:
          type: string
          description: Liabilities due to Unrealized loss of currency (Applicable to Multi-currency margin/Portfolio margin).
        crossLiab:
          type: string
          description: Cross Liabilities of currency (Applicable to Spot mode/Multi-currency margin/Portfolio margin).
        isoLiab:
          type: string
          description: Isolated Liabilities of currency (Applicable to Multi-currency margin/Portfolio margin).
        rewardBal:
          type: string
          description: Trial fund balance.
        mgnRatio:
          type: string
          description: Cross margin ratio of currency.
        imr:
          type: string
          description: Cross initial margin requirement at the currency level.
        mmr:
          type: string
          description: Cross maintenance margin requirement at the currency level.
        interest:
          type: string
          description: Interest of currency.
        twap:
          type: string
          description: System forced repayment (TWAP) indicator.
        maxLoan:
          type: string
          description: Max loan of currency.
        eqUsd:
          type: string
          description: Equity USD of currency.
        borrowFroz:
          type: string
          description: Potential borrowing IMR of currency in USD (Only applicable to Spot mode/Multi-currency margin/Portfolio margin).
        notionalLever:
          type: string
          description: Leverage of currency.
        coinUsdPrice:
          type: string
          description: Price index USD of currency.
        stgyEq:
          type: string
          description: Strategy equity.
        isoUpl:
          type: string
          description: Isolated unrealized profit and loss of currency.
        spotInUseAmt:
          type: string
          description: Spot in use amount.
        clSpotInUseAmt:
          type: string
          description: User-defined spot risk offset amount.
        maxSpotInUseAmt:
          type: string
          description: Max possible spot risk offset amount.
        smtSyncEq:
          type: string
          description: Smart sync equity.
        spotCopyTradingEq:
          type: string
          description: Spot smart sync equity.
        spotBal:
          type: string
          description: Spot balance.
        openAvgPx:
          type: array
          items:
            type: string
          description: Spot average cost price.
        accAvgPx:
          type: array
          items:
            type: string
          description: Spot accumulated cost price.
        spotUpl:
          type: string
          description: Spot unrealized profit and loss.
        spotUplRatio:
          type: string
          description: Spot unrealized profit and loss ratio.
        totalPnl:
          type: string
          description: Spot accumulated profit and loss.
        totalPnlRatio:
          type: string
          description: Spot accumulated profit and loss ratio.
    instTypeEnum:
      type: string
      description: Instrument type.
      enum:
        - MARGIN
        - SWAP
        - FUTURES
        - OPTION
        - ANY
      example: FUTURES
    PositionRequestArgs:
      type: object
      properties:
        channel:
          type: string
          description: Name of the channel.
          example: positions
        instType:
          $ref: "#/components/schemas/instTypeEnum"
        instFamily:
          type: string
          description: Instrument family (applicable to FUTURES/SWAP/OPTION).
          example: BTC-USDT
        instId:
          type: string
          description: Specific instrument ID.
          example: BTC-USD-210625
        extraParams:
          $ref: "#/components/schemas/PositionExtraParams"

    PositionExtraParams:
      type: object
      description: Additional configuration parameters.
      properties:
        updateInterval:
          type: integer
          description: Specifies the interval for data updates. If omitted, pushes data every 5 seconds.
          example: 2000

    PositionResponseArg:
      type: object
      properties:
        channel:
          type: string
          description: Channel name.
          example: positions
        instType:
          $ref: "#/components/schemas/instTypeEnum"
        instFamily:
          type: string
          description: Instrument family.
          example: BTC-USD
        instId:
          type: string
          description: Instrument ID.
          example: BTC-USD-220325

    PositionPushDataArg:
      type: object
      properties:
        channel:
          type: string
          description: Name of the channel.
          example: positions
        uid:
          type: string
          description: User identifier.
          example: user123
        instType:
          $ref: "#/components/schemas/instTypeEnum"
        instFamily:
          type: string
          description: Instrument family.
          example: BTC-USD
        instId:
          type: string
          description: Instrument ID.
          example: BTC-USD-220325

    PositionPushData:
      type: object
      properties:
        instType:
          type: string
          description: Instrument type.
          example: FUTURES
        mgnMode:
          type: string
          description: Margin mode (cross/isolated).
          example: isolated
        posId:
          type: string
          description: Position ID.
          example: "12345"
        posSide:
          $ref: "#/components/schemas/posEnum"
        pos:
          type: string
          description: Quantity of positions.
          example: "1.5"
        baseBal:
          type: string
          description: Base currency balance (deprecated for MARGIN Quick Mode).
          example: "100.0"
        quoteBal:
          type: string
          description: Quote currency balance (deprecated for MARGIN Quick Mode).
          example: "200.0"
        posCcy:
          type: string
          description: Position currency, only for MARGIN positions.
          example: USDT
        avgPx:
          type: string
          description: Average open price.
          example: "40000"
        upl:
          type: string
          description: Unrealized profit and loss (mark price).
          example: "50"
        uplRatio:
          type: string
          description: Unrealized PnL ratio (mark price).
          example: "0.1"
        markPx:
          type: string
          description: Latest mark price.
          example: "40500"
        imr:
          type: string
          description: Initial margin requirement (only for cross).
          example: "500"
        mgnRatio:
          type: string
          description: Margin ratio.
          example: "1.5"
        liab:
          type: string
          description: Liabilities (only for MARGIN).
          example: "1000"
        realizedPnl:
          type: string
          description: Realized profit and loss.
          example: "-25"
        closeOrderAlgo:
          type: array
          description: Close position algo orders.
          items:
            $ref: "#/components/schemas/CloseOrderAlgo"
        cTime:
          type: string
          format: int64
          description: Creation time (Unix timestamp in milliseconds).
          example: "1597026383085"
        uTime:
          type: string
          format: int64
          description: Latest adjustment time (Unix timestamp in milliseconds).
          example: "1597026383085"
        pTime:
          type: string
          format: int64
          description: Push time of position information (Unix timestamp in milliseconds).
          example: "1597026383085"
    posEnum:
      type: string
      description: Position side.
      enum: [long, short, net]
      example: long
    CloseOrderAlgo:
      type: object
      properties:
        algoId:
          type: string
          description: Algo ID.
          example: "algo123"
        slTriggerPx:
          type: string
          description: Stop-loss trigger price.
          example: "39000"
        tpTriggerPx:
          type: string
          description: Take-profit trigger price.
          example: "41000"
        closeFraction:
          type: string
          description: Fraction of position to close when algo order triggers.
          example: "1"
    BalanceRequestArgs:
      type: object
      properties:
        channel:
          $ref: "#/components/schemas/balanceEnum"
    balanceEnum:
      type: string
      description: Name of the channel to subscribe to.
      enum: [balance_and_position]
      example: balance_and_position
    BalanceResponseArg:
      type: object
      properties:
        channel:
          $ref: "#/components/schemas/balanceEnum"

    BalancePushDataArg:
      type: object
      properties:
        channel:
          type: string
          description: Subscribed channel name.
          example: balance_and_position
        uid:
          type: string
          description: User identifier.
          example: user123

    BalancePushData:
      type: object
      properties:
        pTime:
          type: string
          format: date-time
          description: Push time of balance and position information.
          example: 1597026383085
        eventType:
          $ref: "#/components/schemas/eventEnum"
        balData:
          $ref: "#/components/schemas/BalanceData"
        posData:
          $ref: "#/components/schemas/PositionData"
        trades:
          type: array
          description: Details of trades.
          items:
            $ref: "#/components/schemas/TradeData2"
    eventEnum:
      type: string
      description: Event type indicating the update reason.
      enum:
        [
          snapshot,
          delivered,
          exercised,
          transferred,
          filled,
          liquidation,
          claw_back,
          adl,
          funding_fee,
          adjust_margin,
          set_leverage,
          interest_deduction,
        ]
      example: snapshot
    BalanceData:
      type: object
      properties:
        ccy:
          type: string
          description: Currency.
          example: USD
        cashBal:
          type: string
          description: Cash balance.
          example: "1000.00"
        uTime:
          type: string
          format: date-time
          description: Last updated time.
          example: 1597026383085

    PositionData:
      type: object
      properties:
        posId:
          type: string
          description: Position ID.
          example: pos123
        tradeId:
          type: string
          description: Last trade ID.
          example: trade456
        instId:
          type: string
          description: Instrument ID.
          example: BTC-USD-180213
        instType:
          type: string
          description: Instrument type.
          example: futures
        mgnMode:
          type: string
          description: Margin mode.
          example: isolated
        avgPx:
          type: string
          description: Average open price.
          example: "30000.00"
        ccy:
          type: string
          description: Currency used for margin.
          example: BTC
        posSide:
          $ref: "#/components/schemas/posEnum"
        pos:
          type: string
          description: Quantity of positions.
          example: "2.0"
        posCcy:
          type: string
          description: Position currency.
          example: BTC
        uTime:
          type: string
          format: date-time
          description: Last updated time for position.
          example: 1597026383085

    TradeData2:
      type: object
      properties:
        instId:
          type: string
          description: Instrument ID.
          example: BTC-USDT
        tradeId:
          type: string
          description: Trade ID.
          example: trade789

    RiskRequestArgs:
      type: object
      properties:
        channel:
          $ref: "#/components/schemas/balanceEnum"
        instType:
          $ref: "#/components/schemas/instTypeEnum"
        instFamily:
          type: string
          description: Instrument family (applicable to FUTURES, SWAP, or OPTION).
          example: BTC-USD
        instId:
          type: string
          description: Instrument ID.
          example: BTC-USDT-230126

    RiskResponseArg:
      type: object
      properties:
        channel:
          type: string
          description: Channel name.
          example: balance_and_position
        instType:
          $ref: "#/components/schemas/instTypeEnum"
        instFamily:
          type: string
          description: Instrument family (optional).
          example: BTC-USD
        instId:
          type: string
          description: Instrument ID (optional).
          example: BTC-USDT-230126

    RiskPushDataArg:
      type: object
      properties:
        channel:
          type: string
          description: Channel name.
          example: balance_and_position
        uid:
          type: string
          description: User identifier.
          example: "user123"
        instType:
          $ref: "#/components/schemas/instTypeEnum"
        instFamily:
          type: string
          description: Instrument family.
          example: BTC-USD
        instId:
          type: string
          description: Instrument ID.
          example: BTC-USDT-SWAP

    RiskPushData:
      type: object
      properties:
        instType:
          $ref: "#/components/schemas/instTypeEnum"
        mgnMode:
          type: string
        posId:
          type: string
          description: Position ID.
          example: "12345"
        posSide:
          $ref: "#/components/schemas/posEnum"
        pos:
          type: string
          description: Quantity of positions.
          example: "10"
        posCcy:
          type: string
          description: Position currency (only applicable to MARGIN positions).
          example: USD
        instId:
          type: string
          description: Instrument ID.
          example: BTC-USDT-SWAP
        lever:
          type: string
          description: Leverage (not applicable to OPTION sellers).
          example: "10x"
        markPx:
          type: string
          description: Mark price.
          example: "35000.12"
        mgnRatio:
          type: string
          description: Margin ratio.
          example: "0.02"
        ccy:
          type: string
          description: Currency used for margin.
          example: USD
        cTime:
          type: string
          format: date-time
          description: Creation time, Unix timestamp in milliseconds.
          example: "1597026383085"
        uTime:
          type: string
          format: date-time
          description: Latest time position was adjusted, Unix timestamp in milliseconds.
          example: "1597026383085"
        pTime:
          type: string
          format: date-time
          description: Push time of positions information, Unix timestamp in milliseconds.
          example: "1597026383085"
    OrderRequestArgs:
      type: object
      properties:
        channel:
          type: string
          description: Channel name.
          example: orders
        instType:
          $ref: "#/components/schemas/instTypeEnum"
        instFamily:
          type: string
          description: Instrument family, applicable to FUTURES, SWAP, or OPTION.
          example: BTC-USD
        instId:
          type: string
          description: Instrument ID.
          example: BTC-USDT

    OrderResponseArg:
      type: object
      properties:
        channel:
          type: string
          example: orders
        instType:
          $ref: "#/components/schemas/instTypeEnum"
        instFamily:
          type: string
          description: Instrument family, applicable to FUTURES/SWAP/OPTION.
          example: BTC-USD
        instId:
          type: string
          description: Instrument ID.
          example: BTC-USDT

    OrderPushDataArg:
      type: object
      properties:
        channel:
          type: string
          description: Channel name.
        uid:
          type: string
          description: User Identifier.
        instType:
          type: string
          description: Instrument type.
        instFamily:
          type: string
          description: Instrument family.
        instId:
          type: string
          description: Instrument ID.

    OrderPushData:
      type: object
      properties:
        instType:
          type: string
          description: Instrument type.
        instId:
          type: string
          description: Instrument ID.
        tgtCcy:
          type: string
          description: Order quantity unit setting for size.
        ccy:
          type: string
          description: Margin currency for cross MARGIN orders.
        ordId:
          type: string
          description: Order ID.
        clOrdId:
          type: string
          description: Client Order ID as assigned by the client.
        tag:
          type: string
          description: Order tag.
        px:
          type: string
          description: Price (in coin unit for options, e.g., BTC/ETH).
        pxUsd:
          type: string
          description: Options price in USD (applicable only to options).
        pxVol:
          type: string
          description: Implied volatility of options order (only for options).
        pxType:
          type: string
          description: Price type of options.
        sz:
          type: string
          description: Original order quantity.
        notionalUsd:
          type: string
          description: Estimated national value in USD.
        ordType:
          $ref: "#/components/schemas/orderEnum"
        side:
          type: string
          description: Order side.
        posSide:
          $ref: "#/components/schemas/posEnum"
        tdMode:
          type: string
          description: Trade mode cross,isolated or cash.
        fillPx:
          type: string
          description: Last filled price.
        tradeId:
          type: string
          description: Last trade ID.
        fillSz:
          type: string
          description: Last filled quantity.
        fillPnl:
          type: string
          description: Last filled profit and loss.
        fillTime:
          type: string
          description: Last filled time (Unix timestamp in milliseconds).
        state:
          $ref: "#/components/schemas/stateEnum"
        lever:
          type: string
          description: Leverage (only applicable to MARGIN/FUTURES/SWAP).
        uTime:
          type: string
          format: date-time
          description: Update time in Unix timestamp (milliseconds).
        cTime:
          type: string
          format: date-time
          description: Creation time in Unix timestamp (milliseconds).
    orderEnum:
      type: string
      enum:
        [
          market,
          limit,
          post_only,
          fok,
          ioc,
          optimal_limit_ioc,
          mmp,
          mmp_and_post_only,
          op_fok,
        ]
      description: Order type.
    stateEnum:
      type: string
      enum: [canceled, live, partially_filled, filled, mmp_canceled]
      description: Order state.
    FillsRequestArgs:
      type: object
      properties:
        channel:
          type: string
          description: Name of the channel to subscribe or unsubscribe to.
          example: fills
        instId:
          type: string
          description: (Optional) Instrument ID to specify which instrument for the subscription.
          example: BTC-USD

    FillsResponseArg:
      type: object
      properties:
        channel:
          type: string
          description: Name of the channel.
          example: fills
        instId:
          type: string
          description: (Optional) Instrument ID to filter events by instrument.
          example: BTC-USD

    FillsPushDataArg:
      type: object
      properties:
        channel:
          type: string
          description: Name of the subscribed channel.
          example: fills
        uid:
          type: string
          description: User Identifier for tracking user subscriptions.
          example: user123
        instId:
          type: string
          description: (Optional) Instrument ID to filter trade data by instrument.
          example: BTC-USD

    FillsPushData:
      type: object
      properties:
        instId:
          type: string
          description: Instrument ID for the trade.
          example: BTC-USD
        fillSz:
          type: string
          description: Filled quantity in the trade.
          example: "0.5"
        fillPx:
          type: string
          description: Last filled price.
          example: "45000"
        side:
          type: string
          description: Direction of the trade.
          example: buy
        ts:
          type: string
          description: Filled time in Unix timestamp format (milliseconds).
          example: "1597026383085"
        ordId:
          type: string
          description: Order ID related to the trade.
          example: "order123"
        tradeId:
          type: string
          description: The last trade ID in the aggregation of trades.
          example: "trade5678"
        execType:
          type: string
          description: Liquidity taker (T) or maker (M).
          example: T
        count:
          type: string
          description: The count of trades aggregated.
          example: "5"
    PlaceOrderArgs:
      type: object
      properties:
        instId:
          type: string
          description: Instrument ID (e.g., BTC-USDT).
          example: BTC-USDT
        tdMode:
          type: string
          description: Trade mode (e.g., isolated, cross, cash).
          example: isolated
        ccy:
          type: string
          description: Margin currency (only for cross margin orders).
          example: USDT
        clOrdId:
          type: string
          description: Client Order ID.
          example: "client12345"
        tag:
          type: string
          description: Order tag for identification.
          example: "tag123"
        side:
          type: string
          description: Order side (buy or sell).
          example: buy
        posSide:
          type: string
          description: Position side (required in long/short mode).
          example: long
        ordType:
          $ref: "#/components/schemas/orderEnum"
        sz:
          type: string
          description: Quantity to buy or sell.
          example: "0.5"
        px:
          type: string
          description: Order price (only for limit, post_only, fok, ioc orders).
          example: "45000"
        pxUsd:
          type: string
          description: Price in USD (for options).
          example: "45000"
        pxVol:
          type: string
          description: Price based on implied volatility (for options).
          example: "0.01"
        reduceOnly:
          type: boolean
          description: Whether the order can only reduce the position size.
          example: false
        tgtCcy:
          type: string
          description: Order quantity unit (e.g., base_ccy or quote_ccy).
          example: quote_ccy
        banAmend:
          type: boolean
          description: Whether to disallow amendments to the size of SPOT Market Orders.
          example: false
        quickMgnType:
          type: string
          description: Quick margin type (manual, auto_borrow, auto_repay).
          example: manual
        stpId:
          type: string
          description: Self-trade prevention ID (for preventing self trade).
          example: "12345"
        stpMode:
          type: string
          description: Self-trade prevention mode (e.g., cancel_maker, cancel_taker).
          example: cancel_maker
        expTime:
          type: string
          description: Request effective deadline in Unix timestamp format (milliseconds).
          example: "1597026383085"

    OrderResponseData:
      type: object
      properties:
        ordId:
          type: string
          description: Order ID.
          example: "123456789"
        clOrdId:
          type: string
          description: Client Order ID as assigned by the client.
          example: "client12345"
        tag:
          type: string
          description: Order tag.
          example: "orderTag"
        ts:
          type: string
          format: date-time
          description: Timestamp when the order request processing is finished, in Unix timestamp format (milliseconds).
          example: "1597026383085"
        sCode:
          type: string
          description: Order status code (0 means success).
          example: "0"
        sMsg:
          type: string
          description: Rejection or success message of the event execution.
          example: "Order placed successfully."

    CancelOrderArgs:
      type: object
      properties:
        instId:
          type: string
          description: Instrument ID.
          example: "BTC-USDT"
        ordId:
          type: string
          description: Order ID. Either `ordId` or `clOrdId` is required. If both are provided, `ordId` will be used.
          example: "order123456"
        clOrdId:
          type: string
          description: Client Order ID as assigned by the client. Either `ordId` or `clOrdId` is required.
          maxLength: 32
          pattern: "^[a-zA-Z0-9]{1,32}$"
          example: "clientOrder123"

    CancelOrderResponseData:
      type: object
      properties:
        ordId:
          type: string
          description: Order ID.
          example: "order123456"
        clOrdId:
          type: string
          description: Client Order ID as assigned by the client.
          example: "clientOrder123"
        ts:
          type: string
          format: date-time
          description: Timestamp when the order request processing is finished, in milliseconds.
          example: "1597026383085"
        sCode:
          type: string
          description: Order status code, where `0` means success.
          example: "0"
        sMsg:
          type: string
          description: Status message describing the order result.
          example: "Order successfully canceled"

    AmendOrderArgs:
      type: object
      properties:
        instId:
          type: string
          description: Instrument ID.
          example: "BTC-USDT"
        cxlOnFail:
          type: boolean
          description: Whether the order should be automatically canceled if the amendment fails. Default is `false`.
          default: false
          example: true
        ordId:
          type: string
          description: Order ID. Either `ordId` or `clOrdId` is required. If both are provided, `ordId` will be used.
          example: "order123456"
        clOrdId:
          type: string
          description: Client Order ID as assigned by the client.
          example: "clientOrder123"
        reqId:
          type: string
          description: Client Request ID for order amendment.
          maxLength: 32
          example: "amendReq456"
        newSz:
          type: string
          description: New quantity after amendment. Must be greater than 0. Either `newSz` or `newPx` is required.
          example: "2.5"
        newPx:
          type: string
          description: New price after amendment.
          example: "45000"
        newPxUsd:
          type: string
          description: New price in USD for options orders. Only one of `newPx`, `newPxUsd`, or `newPxVol` should be provided.
          example: "300"
        newPxVol:
          type: string
          description: New implied volatility for options orders, where 1 represents 100%. Only one of `newPx`, `newPxUsd`, or `newPxVol` should be provided.
          example: "0.5"
        expTime:
          type: string
          format: date-time
          description: Effective deadline for the request, in milliseconds.
          example: "1597026383085"

    AmendOrderResponseData:
      type: object
      properties:
        ordId:
          type: string
          description: Order ID.
          example: "order123456"
        clOrdId:
          type: string
          description: Client Order ID as assigned by the client.
          example: "clientOrder123"
        ts:
          type: string
          format: date-time
          description: Timestamp when the order request was processed, in milliseconds.
          example: "1597026383085"
        reqId:
          type: string
          description: Client Request ID for the order amendment.
          example: "amendReq456"
        sCode:
          type: string
          description: Order status code. `0` means success.
          example: "0"
        sMsg:
          type: string
          description: Status message for the order amendment.
          example: "Order amendment successful"
    MassCancelArgs:
      type: object
      properties:
        instType:
          $ref: "#/components/schemas/instTypeEnum"
        instFamily:
          type: string
          description: Instrument family
        lockInterval:
          type: integer
          description: |
            Lock interval in milliseconds. The range should be [0, 10,000]. 
            Default is 0. Set it to "0" to unlock immediately.
            Error `54008` will be thrown if an order is placed during the lock interval, 
            which is different from `51034` triggered when MMP is reached.
          minimum: 0
          maximum: 10000

    MassCancelResponseData:
      type: object
      properties:
        result:
          type: boolean
          description: Result of the request. `true` if successful, otherwise `false`.

    AlgoOrdersArgs:
      type: object
      properties:
        channel:
          type: string
          description: Name of the channel.

        instType:
          $ref: "#/components/schemas/instTypeEnum"
        instFamily:
          type: string
          description: |
            Instrument family. Applicable only to `FUTURES`, `SWAP`, or `OPTION`.
        instId:
          type: string
          description: Instrument ID.

    AlgoOrderResponseArg:
      type: object
      properties:
        channel:
          type: string
          description: Name of the channel.
        instType:
          $ref: "#/components/schemas/instTypeEnum"
        instFamily:
          type: string
          description: |
            Instrument family. Applicable only for `FUTURES`, `SWAP`, or `OPTION`.
        instId:
          type: string
          description: Instrument ID.

    AlgoOrderPushData:
      type: object
      properties:
        instType:
          type: string
          description: Type of instrument.
        instId:
          type: string
          description: Instrument ID.
        ccy:
          type: string
          description: |
            Margin currency. Only applicable to cross-margin orders in Spot and Futures modes.
        ordId:
          type: string
          description: Latest order ID. Deprecated.
        ordIdList:
          type: array
          items:
            type: string
          description: List of order IDs.
        algoId:
          type: string
          description: Algo ID.
        clOrdId:
          type: string
          description: Client Order ID assigned by the client.
        sz:
          type: string
          description: |
            Quantity to buy or sell.
            - SPOT/MARGIN: Unit of currency.
            - FUTURES/SWAP/OPTION: Unit of contract.
        ordType:
          $ref: "#/components/schemas/orderEnum"
        side:
          type: string
          description: Order side.

        posSide:
          $ref: "#/components/schemas/posEnum"
        tdMode:
          type: string
          description: Trade mode.

        tgtCcy:
          type: string
          description: |
            Order quantity unit setting for `sz`. Applicable to SPOT Market Orders.
            Default is `quote_ccy` for buy, `base_ccy` for sell.

        lever:
          type: string
          description: Leverage (0.01 to 125). Applicable only to MARGIN/FUTURES/SWAP.
        state:
          $ref: "#/components/schemas/stateEnum"
        tpTriggerPx:
          type: string
          description: Take-profit trigger price.
        tpTriggerPxType:
          type: string
          description: Take-profit trigger price type.

        tpOrdPx:
          type: string
          description: Take-profit order price.
        slTriggerPx:
          type: string
          description: Stop-loss trigger price.
        slTriggerPxType:
          type: string
          description: Stop-loss trigger price type.

        slOrdPx:
          type: string
          description: Stop-loss order price.
        triggerPx:
          type: string
          description: Trigger price.
        triggerPxType:
          type: string
          description: Trigger price type.

        ordPx:
          type: string
          description: Order price for the trigger order.
        last:
          type: string
          description: Last filled price while placing the order.
        actualSz:
          type: string
          description: Actual order quantity.
        actualPx:
          type: string
          description: Actual order price.
        notionalUsd:
          type: string
          description: Estimated notional value in USD of the order.
        tag:
          type: string
          description: Order tag.
        actualSide:
          type: string
          description: |
            Actual trigger side. Applicable to `oco` and `conditional` orders.
        triggerTime:
          type: string
          format: int64
          description: Trigger time in Unix timestamp format (milliseconds).
        reduceOnly:
          type: boolean
          description: Whether the order can only reduce the position size.
        failCode:
          type: string
          description: |
            Failure reason for algo order trigger. Empty for `effective/canceled` state.
        algoClOrdId:
          type: string
          description: Client Algo Order ID assigned by the client.
        reqId:
          type: string
          description: Client Request ID for order amendment. Empty if no amendment.
        amendResult:
          type: string
          description: Result of amending the order.

        amendPxOnTriggerType:
          type: string
          description: Whether to enable Cost-price SL for split TPs.

        attachAlgoOrds:
          type: array
          items:
            $ref: "#/components/schemas/AttachAlgoOrds"
        linkedOrd:
          $ref: "#/components/schemas/LinkData"
        cTime:
          type: string
          format: int64
          description: Creation time in Unix timestamp format (milliseconds).
        uTime:
          type: string
          format: int64
          description: Update time in Unix timestamp format (
    LinkData:
      type: object
      description: Linked TP order details. Applicable to SL order from OCO.
      properties:
        ordId:
          type: string
          description: Order ID.
    AttachAlgoOrds:
      type: object
      properties:
        attachAlgoClOrdId:
          type: string
          description: Client-supplied Algo ID for attached TP/SL order.
        tpTriggerPx:
          type: string
          description: Take-profit trigger price.
        tpTriggerPxType:
          type: string
          description: Take-profit trigger price type.

        tpOrdPx:
          type: string
          description: Take-profit order price.
        slTriggerPx:
          type: string
          description: Stop-loss trigger price.
        slTriggerPxType:
          type: string
          description: Stop-loss trigger price type.

        slOrdPx:
          type: string
          description: Stop-loss order price.

    RecurringOrderArg:
      type: object
      properties:
        channel:
          type: string
        instType:
          type: string
        algoId:
          type: string
        uid:
          type: string

    RecurringBuyDetails:
      type: object
      properties:
        ccy:
          type: string
        ratio:
          type: string
        totalAmt:
          type: string
        profit:
          type: string
        avgPx:
          type: string
        px:
          type: string

    RecurringOrderData:
      type: object
      properties:
        algoId:
          type: string
        algoClOrdId:
          type: string
        instType:
          type: string
        cTime:
          type: string
        uTime:
          type: string
        algoOrdType:
          type: string

        state:
          type: string

        stgyName:
          type: string
        recurringList:
          type: array
          items:
            $ref: "#/components/schemas/RecurringBuyDetails"
        period:
          type: string

        recurringDay:
          type: string
        recurringHour:
          type: string
        recurringTime:
          type: string
        timeZone:
          type: string
        amt:
          type: string
        investmentAmt:
          type: string
        investmentCcy:
          type: string

        nextInvestTime:
          type: string
        totalPnl:
          type: string
        totalAnnRate:
          type: string
        pnlRatio:
          type: string
        mktCap:
          type: string
        cycles:
          type: string
        tag:
          type: string
        pTime:
          type: string

    CopyTradingArg:
      type: object
      properties:
        channel:
          type: string
        uid:
          type: string
        instType:
          type: string

    CopyTradingData:
      type: object
      properties:
        instType:
          type: string
        infoType:
          type: string

        subPosId:
          type: string
        uniqueCode:
          type: string
        instId:
          type: string
        lever:
          type: string
        avgPx:
          type: string
        ccy:
          type: string
        side:
          type: string

        posSide:
          type: string

        slTotalAmt:
          type: string
        rmThold:
          type: string
        minNotional:
          type: string
        copyTotalAmt:
          type: string
        slippageRatio:
          type: string
        maxLeadTraderNum:
          type: string

    LeadTradingArg:
      type: object
      properties:
        channel:
          type: string
        uid:
          type: string
        instType:
          type: string

    LeadTradingData:
      type: object
      properties:
        instType:
          type: string
        infoType:
          type: string

        subPosId:
          type: string
        uniqueCode:
          type: string
        instId:
          type: string
        side:
          type: string

        posSide:
          type: string

        maxLeadTraderNum:
          type: string
        minLeadEq:
          type: string

    TickersRequestArg:
      type: object
      properties:
        channel:
          type: string

        instId:
          type: string

    TickersData:
      type: object
      properties:
        instType:
          type: string
        instId:
          type: string
        last:
          type: string
        lastSz:
          type: string
        askPx:
          type: string
        askSz:
          type: string
        bidPx:
          type: string
        bidSz:
          type: string
        open24h:
          type: string
        high24h:
          type: string
        low24h:
          type: string
        volCcy24h:
          type: string
        vol24h:
          type: string
        sodUtc0:
          type: string
        sodUtc8:
          type: string
        ts:
          type: string

    CandleStickData:
      type: object
      properties:
        ts:
          type: string
        o:
          type: string
        h:
          type: string
        l:
          type: string
        c:
          type: string
        vol:
          type: string
        volCcy:
          type: string
        volCcyQuote:
          type: string
        confirm:
          type: string

    TradesData:
      type: object
      properties:
        instId:
          type: string
        tradeId:
          type: string
        px:
          type: string
        sz:
          type: string
        side:
          type: string

        ts:
          type: string
        count:
          type: string
    AllTradesData:
      type: object
      properties:
        instId:
          type: string
        tradeId:
          type: string
        px:
          type: string
        sz:
          type: string
        side:
          type: string

        ts:
          type: string
    asks:
      type: array
      items:
        type: string
    OrderbookData:
      type: object
      properties:
        asks:
          type: array
          items:
            $ref: "#/components/schemas/asks"
        bids:
          type: array
          items:
            $ref: "#/components/schemas/asks"
        ts:
          type: string
        checksum:
          type: integer
        prevSeqId:
          type: integer
        seqId:
          type: integer

    OptionTradesData:
      type: object
      properties:
        instId:
          type: string
        instFamily:
          type: string
        tradeId:
          type: string
        px:
          type: string
        sz:
          type: string
        side:
          type: string

        optType:
          type: string

        fillVol:
          type: string
        fwdPx:
          type: string
        idxPx:
          type: string
        markPx:
          type: string
        ts:
          type: string

    AuctionData:
      type: object
      properties:
        instId:
          type: string
        eqPx:
          type: string
        matchedSz:
          type: string
        unmatchedSz:
          type: string
        auctionEndTime:
          type: string
        state:
          type: string

        ts:
          type: string
    SpreadOrderArg:
      type: object
      properties:
        channel:
          type: string
        instId:
          type: string

    SpreadOrderData:
      type: object
      properties:
        instId:
          type: string
        eqPx:
          type: string
        matchedSz:
          type: string
        unmatchedSz:
          type: string
        auctionEndTime:
          type: string
        state:
          type: string

        ts:
          type: string

    SpreadResponseData:
      type: object
      properties:
        ordId:
          type: string
        clOrdId:
          type: string
        tag:
          type: string
        sCode:
          type: string
        sMsg:
          type: string

    SpreadAmendArgs:
      type: object
      properties:
        ordId:
          type: string
        clOrdId:
          type: string
        reqId:
          type: string
        newSz:
          type: string
        newPx:
          type: string

    SpreadCancelArgs:
      type: object
      properties:
        ordId:
          type: string
        clOrdId:
          type: string

    SpreadCancelAllArgs:
      type: object
      properties:
        sprdId:
          type: string
    OrderChannelArgs:
      type: object
      properties:
        channel:
          type: string

        sprdId:
          type: string

    OrderChannelDetails:
      type: object
      properties:
        channel:
          type: string
        sprdId:
          type: string

    OrderChannelPushData:
      type: object
      properties:
        sprdId:
          type: string
        ordId:
          type: string
        clOrdId:
          type: string
        tag:
          type: string
        px:
          type: string
        sz:
          type: string
        ordType:
          type: string

        side:
          type: string

        fillSz:
          type: string
        fillPx:
          type: string
        tradeId:
          type: string
        accFillSz:
          type: string
        pendingFillSz:
          type: string
        pendingSettleSz:
          type: string
        canceledSz:
          type: string
        avgPx:
          type: string
        state:
          $ref: "#/components/schemas/stateEnum"
        cancelSource:
          type: string

        uTime:
          type: string
        cTime:
          type: string
        code:
          type: string
        msg:
          type: string
        reqId:
          type: string
        amendResult:
          type: string

    TradeChannelPushData:
      type: object
      properties:
        sprdId:
          type: string
        tradeId:
          type: string
        ordId:
          type: string
        clOrdId:
          type: string
        tag:
          type: string
        fillPx:
          type: string
        fillSz:
          type: string
        side:
          type: string

        state:
          type: string

        execType:
          type: string

        ts:
          type: string
        legs:
          type: array
          items:
            $ref: "#/components/schemas/Legs"
        code:
          type: string
        msg:
          type: string
    Legs:
      type: object
      properties:
        instId:
          type: string
        px:
          type: string
        sz:
          type: string
        szCont:
          type: string
        side:
          type: string

        fillPnl:
          type: string
        fee:
          type: string
        feeCcy:
          type: string
        tradeId:
          type: string

    OrderbookChannelPushData:
      type: object
      properties:
        asks:
          type: array
          items:
            $ref: "#/components/schemas/asks"
        bids:
          type: array
          items:
            $ref: "#/components/schemas/asks"
        ts:
          type: string
        seqId:
          type: integer
    SprdArg:
      type: object
      properties:
        channel:
          type: string
          description: Channel name
        sprdId:
          type: string
          description: Spread ID
    TradeData:
      type: object
      properties:
        sprdId:
          type: string
          description: Spread ID, e.g. BTC-USDT
        tradeId:
          type: string
          description: Trade ID
        px:
          type: string
          description: Trade price
        sz:
          type: string
          description: Trade size
        side:
          type: string
          description: Trade direction (buy/sell)
        ts:
          type: string
          format: date-time
          description: Filled time in Unix timestamp format in milliseconds, e.g. 1597026383085
    TickerData:
      type: object
      properties:
        sprdId:
          type: string
          description: Spread ID
        last:
          type: string
          description: Last traded price
        lastSz:
          type: string
          description: Last traded size
        askPx:
          type: string
          description: Best ask price
        askSz:
          type: string
          description: Best ask size
        bidPx:
          type: string
          description: Best bid price
        bidSz:
          type: string
          description: Best bid size
        open24h:
          type: string
          description: Open price in the past 24 hours
        high24h:
          type: string
          description: Highest price in the past 24 hours
        low24h:
          type: string
          description: Lowest price in the past 24 hours
        vol24h:
          type: string
          description: 24h trading volume, with a unit of base currency or USD
        ts:
          type: string
          format: date-time
          description: Ticker data generation time in Unix timestamp format in milliseconds, e.g. 1597026383085
    CandlestickData:
      type: object
      properties:
        ts:
          type: string
          format: date-time
          description: Opening time of the candlestick, in Unix timestamp format in milliseconds, e.g. 1597026383085
        o:
          type: string
          description: Open price
        h:
          type: string
          description: Highest price
        l:
          type: string
          description: Lowest price
        c:
          type: string
          description: Close price
        vol:
          type: string
          description: Trading volume, in `szCcy`
        confirm:
          type: string
          description: The state of candlesticks. `0` represents uncompleted, `1` represents completed
    InstrumentArgs:
      type: object
      properties:
        channel:
          type: string
          description: The name of the channel to subscribe to or unsubscribe from. In this case, it's `instruments`.
        instType:
          $ref: "#/components/schemas/instTypeEnum"
    InstrumentData:
      type: object
      properties:
        instId:
          type: string
          description: Instrument ID (e.g., BTC-UST).
        uly:
          type: string
          description: Underlying instrument for FUTURES/SWAP/OPTION.
        instFamily:
          type: string
          description: Instrument family (e.g., BTC-USD) for FUTURES/SWAP/OPTION.
        baseCcy:
          type: string
          description: Base currency for SPOT/MARGIN (e.g., BTC in BTC-USDT).
        quoteCcy:
          type: string
          description: Quote currency for SPOT/MARGIN (e.g., USDT in BTC-USDT).
        tickSz:
          type: string
          description: Tick size (e.g., 0.0001) for OPTION.
    OpenInterestData:
      type: object
      properties:
        instType:
          type: string
          description: Instrument type.
        instId:
          type: string
          description: Instrument ID (e.g., LTC-USD-SWAP).
        oi:
          type: string
          description: Open interest, in units of contracts.
        oiCcy:
          type: string
          description: Open interest, in currency units.
        ts:
          type: string
          description: The time when the data was updated, in Unix timestamp format (milliseconds), e.g., 1597026383085.
    FundingRateData:
      type: object
      properties:
        instType:
          type: string
          description: Instrument type (e.g., SWAP).
        instId:
          type: string
          description: Instrument ID (e.g., BTC-USD-SWAP).
        method:
          type: string
          description: Funding rate mechanism.
        fundingRate:
          type: string
          description: Current funding rate.
        fundingTime:
          type: string
          description: Funding time of the upcoming settlement, Unix timestamp format in milliseconds (e.g., 1597026383085).
        nextFundingRate:
          type: string
          description: Forecasted funding rate for the next period.
        nextFundingTime:
          type: string
          description: Forecasted funding time for the next period, Unix timestamp format in milliseconds (e.g., 1597026383085).
        minFundingRate:
          type: string
          description: The lower limit of the predicted funding rate for the next cycle.
        maxFundingRate:
          type: string
          description: The upper limit of the predicted funding rate for the next cycle.
        settState:
          type: string
          description: Settlement state of funding rate.
        settFundingRate:
          type: string
          description: If settState = processing, it is the funding rate being used for the current settlement cycle. If settState = settled, it is the funding rate used for the previous settlement cycle.
        premium:
          type: string
          description: Premium between the mid price of perps market and the index price.
        ts:
          type: string
          description: Data return time, Unix timestamp format in milliseconds (e.g., 1597026383085).
    PriceLimitData:
      type: object
      properties:
        instType:
          type: string
          description: Instrument type.
        instId:
          type: string
          description: Instrument ID (e.g., BTC-USDT).
        buyLmt:
          type: string
          description: Maximum buy price. Returns `""` when `enabled` is false.
        sellLmt:
          type: string
          description: Minimum sell price. Returns `""` when `enabled` is false.
        ts:
          type: string
          description: Price update time in Unix timestamp format (e.g., 1597026383085).
        enabled:
          type: boolean
          description: Whether the price limit is effective. `true` if effective, `false` if not effective.
    OptionData:
      type: object
      properties:
        instType:
          type: string
          description: The instrument type (e.g., OPTION).
        instId:
          type: string
          description: Instrument ID (e.g., BTC-USD-OPTION).
        uly:
          type: string
          description: Underlying instrument (e.g., BTC-USD).
        delta:
          type: string
          description: Sensitivity of the option price to the underlying price.
        gamma:
          type: string
          description: The delta's sensitivity to the underlying price.
        vega:
          type: string
          description: Sensitivity of the option price to implied volatility.
        theta:
          type: string
          description: Sensitivity of the option price to remaining maturity.
        deltaBS:
          type: string
          description: Sensitivity of the option price to the underlying price in Black-Scholes (BS) mode.
        gammaBS:
          type: string
          description: The delta's sensitivity to the underlying price in BS mode.
        vegaBS:
          type: string
          description: Sensitivity of the option price to implied volatility in BS mode.
        thetaBS:
          type: string
          description: Sensitivity of the option price to remaining maturity in BS mode.
        lever:
          type: string
          description: Leverage applied to the option.
        markVol:
          type: string
          description: Mark volatility of the option.
        bidVol:
          type: string
          description: Bid volatility of the option.
        askVol:
          type: string
          description: Ask volatility of the option.
        realVol:
          type: string
          description: Realized volatility (currently not in use).
        volLv:
          type: string
          description: Implied volatility of at-the-money options.
        fwdPx:
          type: string
          description: Forward price of the option.
        ts:
          type: string
          description: The time when the data was updated (in Unix timestamp format).
    PriceData:
      type: object
      properties:
        instType:
          type: string
          description: The instrument type (FUTURES, OPTION, SWAP).
        instId:
          type: string
          description: The instrument ID (e.g., BTC-USD-170310).
        settlePx:
          type: string
          description: Estimated delivery or exercise price for the instrument.
        ts:
          type: string
          description: The timestamp when the data was updated (Unix timestamp format in milliseconds).
    MarkPriceData:
      type: object
      properties:
        instType:
          type: string
          description: The instrument type (FUTURES, OPTION, SWAP).
        instId:
          type: string
          description: The instrument ID (e.g., BTC-USD).
        markPx:
          type: string
          description: The mark price for the instrument.
        ts:
          type: string
          description: The timestamp when the data was updated (Unix timestamp format in milliseconds).
    LiquidationDetails:
      type: object
      properties:
        side:
          type: string

          description: The order side (buy or sell), only applicable to FUTURES/SWAP.
        posSide:
          type: string

          description: The position side (long or short), applicable only to FUTURES/SWAP.
        bkPx:
          type: string
          description: The bankruptcy price, applicable only to FUTURES/SWAP.
        sz:
          type: string
          description: The quantity of liquidation, applicable to MARGIN/FUTURES/SWAP.
        bkLoss:
          type: string
          description: The bankruptcy loss.
        ccy:
          type: string
          description: The liquidation currency, applicable only to MARGIN.
        ts:
          type: string
          description: The liquidation time in Unix timestamp format (milliseconds).
    LiquidationData:
      type: object
      properties:
        instType:
          type: string
          description: The type of instrument (FUTURES, SWAP, or OPTION).
        instId:
          type: string
          description: The instrument ID (e.g., BTC-USD-SWAP).
        uly:
          type: string
          description: The underlying asset, applicable only to FUTURES/SWAP/OPTION.
        details:
          type: array
          items:
            $ref: "#/components/schemas/LiquidationDetails"
    ADLData:
      type: object
      properties:
        instType:
          type: string
          description: The type of instrument (e.g., FUTURES, SWAP, OPTION).
        instFamily:
          type: string
          description: The instrument family (e.g., BTC, ETH).
        state:
          type: string

          description: The state of the insurance fund.
        bal:
          type: string
          description: The real-time insurance fund balance.
        ccy:
          type: string
          description: The corresponding currency of the insurance fund balance.
        maxBal:
          type: string
          description: The maximum insurance fund balance in the past eight hours (applicable when state is warning or adl).
        maxBalTs:
          type: string
          description: Timestamp when the insurance fund balance reached the maximum in the past eight hours (Unix timestamp, applicable when state is warning or adl).
        decRate:
          type: string
          description: The real-time insurance fund decline rate (compare bal and maxBal), applicable when state is warning or adl.
        adlType:
          type: string

          description: The type of ADL related event.
        adlBal:
          type: string
          description: The insurance fund balance that triggers ADL.
        adlRate:
          type: string
          description: The insurance fund decline rate that triggers ADL.
        adlRecBal:
          type: string
          description: The insurance fund balance that turns off ADL.
        adlRecRate:
          type: string
          description: The insurance fund decline rate that turns off ADL.
        ts:
          type: string
          description: The data push time in Unix timestamp format (milliseconds).
    CalendarRequestArgs:
      type: object
      properties:
        channel:
          type: string
          description: Channel name.

          example: "economic-calendar"
    CalendarPushData:
      type: object
      properties:
        event:
          type: string
          description: The name of the economic event (e.g., GDP report, unemployment rate).
        region:
          type: string
          description: The country, region, or entity associated with the event (e.g., USA, Eurozone).
        category:
          type: string
          description: The category name of the event (e.g., Economic Indicators, Inflation).
        actual:
          type: string
          description: The actual value of the event.
        previous:
          type: string
          description: The latest actual value from the previous period. The value will be revised if applicable.
        forecast:
          type: string
          description: The average forecast among a representative group of economists.
        prevInitial:
          type: string
          description: The initial value of the previous period, only applicable when revision happens.
        date:
          type: string
          description: The estimated release time of the actual field value, Unix timestamp format in milliseconds.
        refDate:
          type: string
          description: The date for which the data point refers to.
        calendarId:
          type: string
          description: The calendar ID associated with the event.
        unit:
          type: string
          description: The unit of the data (e.g., percentage, USD).
        ccy:
          type: string
          description: The currency of the data (e.g., USD, EUR).
        importance:
          type: string
          description: "The level of importance of the event (1: low, 2: medium, 3: high)."
        ts:
          type: string
          description: The time of the latest update in Unix timestamp format (milliseconds).
    DepositRequestArgs:
      type: object
      properties:
        channel:
          type: string
          description: The name of the channel (e.g., deposit-info).
        ccy:
          type: string
          description: The currency associated with the channel (e.g., BTC).
    DepositArg:
      type: object
      properties:
        channel:
          type: string
          description: The name of the channel (e.g., `deposit-info`).
        ccy:
          type: string
          description: The currency associated with the channel (e.g., `BTC`).
    DepositResponseData:
      type: object
      properties:
        event:
          type: string

          description: The event operation (subscribe, unsubscribe, or error).
        arg:
          $ref: "#/components/schemas/DepositArg"
        code:
          type: string
          description: Error code, only relevant if `event` is `error`.
        msg:
          type: string
          description: Error message, only relevant if `event` is `error`.
        connId:
          type: string
          description: WebSocket connection ID, required for all events.
    DepositPushData:
      type: object
      properties:
        event:
          type: string

          description: The event operation (subscribe, unsubscribe, or error).
        arg:
          $ref: "#/components/schemas/DepositArg"
        data:
          type: array
          items:
            $ref: "#/components/schemas/DepositData"
        code:
          type: string
          description: Error code, only relevant if `event` is `error`.
        msg:
          type: string
          description: Error message, only relevant if `event` is `error`.
        connId:
          type: string
          description: WebSocket connection ID, required for all events.
    withdrawData:
      type: object
      properties:
        uid:
          type: string
          description: The user identifier of the message producer.
        subAcct:
          type: string
          description: The sub-account name. Returns an empty string if the message producer is the master account.
        pTime:
          type: string
          description: The push time, in Unix timestamp format in milliseconds.
        ccy:
          type: string
          description: The currency of the deposit.
        chain:
          type: string
          description: The chain name of the deposit.
        amt:
          type: string
          description: The amount of the deposit.
        from:
          type: string
          description: The deposit account (internal OKX account, not a blockchain address).
        areaCodeFrom:
          type: string
          description: The area code of the phone number if the `from` is a phone number.
        to:
          type: string
          description: The deposit address.
        txId:
          type: string
          description: The transaction hash record of the deposit.
        ts:
          type: string
          description: The time when the deposit record was created, in Unix timestamp format in milliseconds.
        state:
          type: string

          description: The status of the deposit.
        depId:
          type: string
          description: The deposit ID.
        fromWdId:
          type: string
          description: The internal transfer initiator's withdrawal ID if the deposit comes from an internal transfer.
        actualDepBlkConfirm:
          type: string
          description: The actual amount of blockchain-confirmed deposit.
    WithdrawPushData:
      type: object
      properties:
        event:
          type: string

          description: The event operation (subscribe, unsubscribe, or error).
        arg:
          $ref: "#/components/schemas/withdrawArgs"
        data:
          type: array
          items:
            $ref: "#/components/schemas/withdrawData"
        code:
          type: string
          description: Error code, only relevant if `event` is `error`.
        msg:
          type: string
          description: Error message, only relevant if `event` is `error`.
        connId:
          type: string
          description: WebSocket connection ID, required for all events.
    withdrawArgs:
      type: object
      properties:
        channel:
          type: string
          description: The name of the channel (e.g., `deposit-info`).
        uid:
          type: string
          description: The user identifier.
        ccy:
          type: string
          description: The currency associated with the deposit (e.g., `BTC`).
    SubscribeRequest:
      type: object
      properties:
        op:
          type: string

          description: Operation type.
        args:
          type: array
          items:
            $ref: "#/components/schemas/Args"
    SubscribeResponse:
      type: object
      properties:
        event:
          type: string

          description: Event type.
        connId:
          type: string
          description: WebSocket connection ID.
        data:
          type: array
          items:
            $ref: "#/components/schemas/Data"

    ErrorResponse:
      type: object
      properties:
        event:
          type: string

          description: Event type.
        code:
          type: string
          description: Error code.
        msg:
          type: string
          description: Error message.

    PushDataResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/Arg"
    PositionRequest:
      type: object
      properties:
        op:
          type: string
          description: Operation type.
          example: subscribe
        args:
          type: array
          description: List of channels to subscribe to.
          items:
            $ref: "#/components/schemas/PositionRequestArgs"

    PositionResponse:
      type: object
      properties:
        event:
          type: string
          description: Type of event for the WebSocket connection.
          example: subscribe
        arg:
          $ref: "#/components/schemas/PositionResponseArg"
        code:
          type: string
          description: Error code, if applicable.
          example: ERR123
        msg:
          type: string
          description: Error message, if applicable.
          example: "Invalid subscription request."
        connId:
          type: string
          description: WebSocket connection ID.
          example: "abc12345xyz"

    PositionPushDataResponse:
      type: object
      properties:
        event:
          type: string
          description: Type of the event (subscribe/unsubscribe/error).
          example: subscribe
        arg:
          $ref: "#/components/schemas/PositionPushDataArg"
        data:
          type: array
          description: List of subscribed data.
          items:
            $ref: "#/components/schemas/PositionPushData"

    BalanceRequest:
      type: object
      properties:
        op:
          type: string
          description: Operation type for the subscription.
          example: subscribe
        args:
          type: array
          description: List of channels to subscribe to.
          items:
            $ref: "#/components/schemas/BalanceRequestArgs"

    BalanceResponse:
      type: object
      properties:
        event:
          type: string
          description: Type of WebSocket event.
          example: subscribe
        arg:
          $ref: "#/components/schemas/BalanceResponseArg"
        code:
          type: string
          description: Error code if the event is of type `error`.
          example: E1234
        msg:
          type: string
          description: Error message if the event is of type `error`.
          example: Invalid channel name.
        connId:
          type: string
          description: WebSocket connection ID.
          example: abc123

    BalancePushDataResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/BalancePushDataArg"
        data:
          type: array
          description: Subscribed data details.
          items:
            $ref: "#/components/schemas/BalancePushData"

    RiskRequest:
      type: object
      properties:
        op:
          type: string
          description: Operation to perform.
          example: subscribe
        args:
          type: array
          description: List of channels to subscribe to.
          items:
            $ref: "#/components/schemas/RiskRequestArgs"

    RiskResponse:
      type: object
      properties:
        event:
          type: string
          description: Event type.
          example: subscribe
        arg:
          $ref: "#/components/schemas/RiskResponseArg"
        code:
          type: string
          description: Error code (if any).
          example: ERR001
        msg:
          type: string
          description: Error message (if any).
          example: "Invalid subscription request"
        connId:
          type: string
          description: WebSocket connection ID.
          example: "connection-12345"

    RiskPushDataResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/RiskPushDataArg"
        data:
          type: array
          description: Subscribed data containing position details.
          items:
            $ref: "#/components/schemas/RiskPushData"
    OrderRequest:
      type: object
      properties:
        op:
          type: string
          description: Operation type, either "subscribe" or "unsubscribe."
          example: subscribe
        args:
          type: array
          description: List of subscribed channels with their details.
          items:
            $ref: "#/components/schemas/OrderRequestArgs"

    OrderResponse:
      type: object
      properties:
        event:
          type: string
          example: subscribe
        arg:
          $ref: "#/components/schemas/OrderResponseArg"
        code:
          type: string
          description: Error code if the event is "error."
          example: ERR001
        msg:
          type: string
          description: Error message if the event is "error."
          example: Invalid subscription.
        connId:
          type: string
          description: WebSocket connection ID.
          example: abc123

    OrderPushDataResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/OrderPushDataArg"
        data:
          type: array
          description: Subscribed data details.
          items:
            $ref: "#/components/schemas/OrderPushData"

    FillsRequest:
      type: object
      properties:
        op:
          type: string
          description: The operation type (either subscribe or unsubscribe).
          example: subscribe
        args:
          type: array
          description: List of channels to subscribe or unsubscribe from.
          items:
            $ref: "#/components/schemas/FillsRequestArgs"

    FillsResponse:
      type: object
      properties:
        event:
          type: string
          description: Event type for subscription, unsubscription, or error notification.
          example: subscribe
        arg:
          $ref: "#/components/schemas/FillsResponseArg"
        code:
          type: string
          description: (Optional) Error code in case of an error event.
          example: "500"
        msg:
          type: string
          description: (Optional) Error message in case of an error event.
          example: "Internal server error"
        connId:
          type: string
          description: WebSocket connection ID for identifying the client connection.
          example: "abc123xyz"

    FillsPushDataResponse:
      type: object
      properties:
        event:
          type: string
          description: Event type for subscription or unsubscription.
          example: subscribe
        arg:
          $ref: "#/components/schemas/FillsPushDataArg"
        data:
          type: array
          description: Array of subscribed trade data details.
          items:
            $ref: "#/components/schemas/FillsPushData"
    PlaceOrderRequest:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the message.
          example: "12345abcd"
        op:
          type: string
          description: Operation type (e.g., order).
          example: order
        args:
          type: array
          description: List of request parameters for the order.
          items:
            $ref: "#/components/schemas/PlaceOrderArgs"

    PlaceOrderResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the message.
          example: "12345abcd"
        op:
          type: string
          description: Operation type.
          example: "orderResponse"
        code:
          type: string
          description: Error code.
          example: "200"
        msg:
          type: string
          description: Error or status message.
          example: "Order processed successfully."
        data:
          type: array
          description: Array of order-related data.
          items:
            $ref: "#/components/schemas/OrderResponseData"
        inTime:
          type: string
          format: date-time
          description: Timestamp at WebSocket gateway when the request is received, in Unix timestamp format (microseconds).
          example: "1597026383085123"
        outTime:
          type: string
          format: date-time
          description: Timestamp at WebSocket gateway when the response is sent, in Unix timestamp format (microseconds).
          example: "1597026383085123"

    CancelOrderRequest:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the message, provided by the client.
          maxLength: 32
          pattern: "^[a-zA-Z0-9]{1,32}$"
          example: "clientMessage123"
        op:
          type: string
          description: Operation type, in this case, `cancel-order`.
          example: "cancel-order"
        args:
          type: array
          description: Request parameters for canceling an order.
          items:
            $ref: "#/components/schemas/CancelOrderArgs"

    CancelOrderResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the message, matching the request message ID.
          example: "clientMessage123"
        op:
          type: string
          description: Operation type, which is `cancel-order`.
          example: "cancel-order"
        code:
          type: string
          description: Error code, if applicable.
          example: "404"
        msg:
          type: string
          description: Error message, if applicable.
          example: "Order not found"
        data:
          type: array
          description: Response data containing details of the processed request.
          items:
            $ref: "#/components/schemas/CancelOrderResponseData"
        inTime:
          type: string
          format: date-time
          description: Timestamp at WebSocket gateway when the request was received, in microseconds.
          example: "1597026383085123"
        outTime:
          type: string
          format: date-time
          description: Timestamp at WebSocket gateway when the response was sent, in microseconds.
          example: "1597026383085123"

    AmendOrderRequest:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the message, provided by the client.
          maxLength: 32
          example: "clientMessage123"
        op:
          type: string
          description: Operation type, which is `amend-order`.
          example: "amend-order"
        args:
          type: array
          description: Request parameters for the amend-order operation.
          items:
            $ref: "#/components/schemas/AmendOrderArgs"

    AmendOrderResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the message, matching the request ID for correlation.
          example: "clientMessage123"
        op:
          type: string
          description: Operation type, which is `amend-order`.
          example: "amend-order"
        code:
          type: string
          description: Error code, if applicable.
          example: "400"
        msg:
          type: string
          description: Error message or status message for the response.
          example: "Invalid order ID"
        data:
          type: array
          description: Data returned for the amend-order operation.
          items:
            $ref: "#/components/schemas/AmendOrderResponseData"
        inTime:
          type: string
          format: date-time
          description: Timestamp at the WebSocket gateway when the request was received, in microseconds.
          example: "1597026383085123"
        outTime:
          type: string
          format: date-time
          description: Timestamp at the WebSocket gateway when the response was sent, in microseconds.
          example: "1597026383085123"
    MassCancelRequest:
      type: object
      summary: Mass cancel request message
      description: |
        This message is used to send a mass-cancel request. 
        The `id` field acts as a unique identifier for the request and will be returned in the response message.
      contentType: application/json
      properties:
        id:
          type: string
          description: |
            Unique identifier of the message provided by the client. 
            It will be returned in the response message for identifying the corresponding request.
          pattern: "^[a-zA-Z0-9]{1,32}$"
        op:
          type: string
          description: |
            Operation type.
            Allowed value: `mass-cancel`
        args:
          type: array
          description: Request parameters
          items:
            $ref: "#/components/schemas/MassCancelArgs"

    MassCancelResponse:
      type: object
      description: Mass cancel response
      contentType: application/json
      properties:
        id:
          type: string
          description: Unique identifier of the message corresponding to the request.
        op:
          type: string
          description: Operation that triggered the error.
        code:
          type: string
          description: Error code representing the specific issue encountered.
        msg:
          type: string
          description: Human-readable error message providing details about the issue.
        data:
          type: array
          description: Additional data related to the error.
          items:
            $ref: "#/components/schemas/MassCancelResponseData"

    AlgoOrdersRequest:
      type: object
      description: |
        This message is used to subscribe or unsubscribe to algo orders channels.
        The `op` field specifies whether the request is a subscription or an unsubscription.
      contentType: application/json
      properties:
        op:
          type: string
          description: Operation type, either `subscribe` or `unsubscribe`.

        args:
          type: array
          description: List of subscribed channels.
          items:
            $ref: "#/components/schemas/AlgoOrdersArgs"

    AlgoOrderResponse:
      type: object
      summary: Event response message
      description: |
        This message is used to confirm events such as `subscribe`, `unsubscribe`, or report an `error`.
        It also contains details about the channel and additional metadata such as error codes and WebSocket connection ID.
      contentType: application/json
      properties:
        event:
          type: string
          description: Event type.

        arg:
          $ref: "#/components/schemas/AlgoOrderResponseArg"
        code:
          type: string
          description: Error code (only present for `error` events).
        msg:
          type: string
          description: Error message (only present for `error` events).
        connId:
          type: string
          description: Unique WebSocket connection ID.

    AlgoOrderPushResponse:
      type: object
      properties:
        channel:
          type: string
          description: Name of the subscribed channel.
        uid:
          type: string
          description: Unique identifier for the user.
        instType:
          $ref: "#/components/schemas/instTypeEnum"
        instFamily:
          type: string
          description: Instrument family. Applicable only for certain instrument types.
        instId:
          type: string
          description: Instrument ID.
        data:
          type: array
          description: Subscribed data.
          items:
            $ref: "#/components/schemas/AlgoOrderPushData"
    AdvanceAlgoOrdersRequest:
      type: object
      properties:
        op:
          type: string
          description: Operation type, either `subscribe` or `unsubscribe`.

        args:
          type: array
          description: List of subscribed channels.
          items:
            $ref: "#/components/schemas/DepositArg"
    DepositData:
      type: object
      properties:
        uid:
          type: string
          description: User Identifier of the message producer
        subAcct:
          type: string
          description: |
            Sub-account name.
            If the message producer is master account, the parameter will return ""
        pTime:
          type: string
          format: date-time
          description: Push time, the millisecond format of the Unix timestamp, e.g. 1597026383085
        ccy:
          type: string
          description: Currency
        chain:
          type: string
          description: Chain name
        amt:
          type: string
          description: Deposit amount
        from:
          type: string
          description: |
            Deposit account.
            Only the internal OKX account is returned, not the address on the blockchain.
        areaCodeFrom:
          type: string
          description: |
            If "from" is a phone number, this parameter returns the area code of the phone number
        to:
          type: string
          description: Deposit address
        txId:
          type: string
          description: Hash record of the deposit
        ts:
          type: string
          format: date-time
          description: Time of deposit record creation in Unix timestamp format (milliseconds), e.g. 1655251200000
        state:
          type: string

          description: |
            Status of deposit:
            - 0: waiting for confirmation
            - 1: deposit credited
            - 2: deposit successful
            - 8: pending due to temporary deposit suspension on this cryptocurrency
            - 11: match the address blacklist
            - 12: account or deposit is frozen
            - 13: sub-account deposit interception
            - 14: KYC limit
        depId:
          type: string
          description: Deposit ID
        fromWdId:
          type: string
          description: |
            Internal transfer initiator's withdrawal ID.
            If the deposit comes from internal transfer, this field displays the withdrawal ID of the internal transfer initiator, and will return "" in other cases.
        actualDepBlkConfirm:
          type: string
          description: The actual amount of blockchain confirmed in a single deposit

    SpotArgs:
      type: object
      properties:
        channel:
          type: string
          description: Subscribed channel name.
          example: "grid-orders-spot"
        instType:
          type: string
          description: Instrument type.
          example: "ANY"
        uid:
          type: string
          description: User identifier.
          example: "44705892343619584"
    SpotData:
      type: object
      properties:
        algoClOrdId:
          type: string
          description: Client-supplied ID for the algo order.
          example: ""
        algoId:
          type: string
          description: Unique identifier for the algorithmic order.
          example: "568028283477164032"
        activeOrdNum:
          type: string
          description: Number of active grid orders.
          example: "10"
        algoOrdType:
          type: string
          description: Type of the algorithmic order.
          example: "grid"
        annualizedRate:
          type: string
          description: Annualized return rate.
          example: "0"
        arbitrageNum:
          type: string
          description: Arbitrage number.
          example: "0"
        baseSz:
          type: string
          description: Initial base currency size.
          example: "0"
        cTime:
          type: string
          format: date-time
          description: Creation time in Unix timestamp.
          example: "1681700496249"
        cancelType:
          type: string
          description: Cancelation type.
          example: "0"
        curBaseSz:
          type: string
          description: Current base currency size.
          example: "0"
        curQuoteSz:
          type: string
          description: Current quote currency size.
          example: "25"
        floatProfit:
          type: string
          description: Floating profit.
          example: "0"
        gridNum:
          type: string
          description: Total number of grids.
          example: "10"
        gridProfit:
          type: string
          description: Profit from the grid.
          example: "0"
        instId:
          type: string
          description: Instrument ID.
          example: "BTC-USDT"
        instType:
          type: string
          description: Instrument type.
          example: "SPOT"
        investment:
          type: string
          description: Total investment in the grid.
          example: "25"
        maxPx:
          type: string
          description: Maximum price level for the grid.
          example: "5000"
        minPx:
          type: string
          description: Minimum price level for the grid.
          example: "400"
        pTime:
          type: string
          format: date-time
          description: Execution time in Unix timestamp.
          example: "1682416738467"
        perMaxProfitRate:
          type: string
          description: Maximum profit rate per grid.
          example: "1.14570215"
        perMinProfitRate:
          type: string
          description: Minimum profit rate per grid.
          example: "0.0991200440528634356837"
        pnlRatio:
          type: string
          description: Profit and loss ratio.
          example: "0"
        profit:
          type: string
          description: Total profit.
          example: "0"
        quoteSz:
          type: string
          description: Initial quote currency size.
          example: "25"
        rebateTrans:
          type: array
          description: Rebate information.
          items:
            $ref: "#/components/schemas/rebateData"
        runPx:
          type: string
          description: Current running price.
          example: "30031.7"
        runType:
          type: string
          description: Run type.
          example: "1"
        triggerParams:
          type: array
          description: Parameters for starting and stopping grid orders.
          items:
            $ref: "#/components/schemas/triggerData"
        singleAmt:
          type: string
          description: Amount for a single grid order.
          example: "0.00101214"
        slTriggerPx:
          type: string
          description: Stop-loss trigger price.
          example: ""
        state:
          type: string
          description: Current state of the grid order.
          example: "running"
        stopResult:
          type: string
          description: Result of the stop action.
          example: "0"
        stopType:
          type: string
          description: Stop type.
          example: "2"
        tag:
          type: string
          description: Metadata tag.
          example: ""
        totalAnnualizedRate:
          type: string
          description: Total annualized return rate.
          example: "0"
        totalPnl:
          type: string
          description: Total profit and loss.
          example: "0"
        tpTriggerPx:
          type: string
          description: Take-profit trigger price.
          example: ""
        tradeNum:
          type: string
          description: Number of trades.
          example: "0"
        uTime:
          type: string
          format: date-time
          description: Last updated time in Unix timestamp.
          example: "1682406665527"
        profitSharingRatio:
          type: string
          description: Ratio for profit sharing.
          example: ""
        copyType:
          type: string
          description: Copy type.
          example: "0"

    SpotGridPushResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/SpotArgs"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SpotData"
    ContractGridPushResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/Arg"
        data:
          type: array
          description: Subscribed data
          items:
            $ref: "#/components/schemas/ContractData"
    ContractData:
      type: object
      properties:
        algoId:
          type: string
          description: Algo ID
        algoClOrdId:
          type: string
          description: Client-supplied Algo ID
        instType:
          type: string
          description: Instrument type
        instId:
          type: string
          description: Instrument ID
        cTime:
          type: string
          format: date-time
          description: Algo order created time, Unix timestamp in milliseconds
        uTime:
          type: string
          format: date-time
          description: Algo order updated time, Unix timestamp in milliseconds
        algoOrdType:
          type: string
          description: Algo order type
        contract_grid:
          $ref: "#/components/schemas/ContractGrid"
    rebateData:
      type: object
      properties:
        rebate:
          type: string
          description: Rebate amount
        rebateCcy:
          type: string
          description: Rebate currency

    ContractGrid:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/stateEnum"
        rebateTrans:
          type: array
          description: Rebate transfer info
          items:
            $ref: "#/components/schemas/rebateData"
        triggerParams:
          type: array
          description: Trigger parameters
          items:
            $ref: "#/components/schemas/triggerData"
    triggerData:
      type: object
      properties:
        triggerAction:
          type: string
          description: Trigger action
        triggerStrategy:
          type: string
          description: Trigger strategy
        delaySeconds:
          type: string
          description: Delay seconds after action triggered
        triggerTime:
          type: string
          format: date-time
          description: Actual action triggered time
        triggerType:
          type: string
          description: Actual action triggered type
        timeframe:
          type: string
          description: K-line type (valid for RSI trigger strategy)
        thold:
          type: integer
          minimum: 1
          maximum: 100
          description: Threshold (valid for RSI trigger strategy)
        triggerCond:
          type: string
          description: Trigger condition (valid for RSI trigger strategy)
        timePeriod:
          type: string
          description: Time Period (valid for RSI trigger strategy)
        triggerPx:
          type: string
          description: Trigger Price (valid for price trigger strategy)
        stopType:
          type: string
          description: Stop type
        maxPx:
          type: string
          description: Upper price of price range
        minPx:
          type: string
          description: Lower price of price range
        gridNum:
          type: string
          description: Grid quantity
        runType:
          type: string
          description: "Grid type (1: Arithmetic, 2: Geometric)"
        tpTriggerPx:
          type: string
          description: Take-profit trigger price
        slTriggerPx:
          type: string
          description: Stop-loss trigger price
        tradeNum:
          type: string
          description: The number of trades executed
        arbitrageNum:
          type: string
          description: The number of arbitrages executed
        singleAmt:
          type: string
          description: Amount per grid
        perMinProfitRate:
          type: string
          description: Estimated minimum profit margin per grid
        perMaxProfitRate:
          type: string
          description: Estimated maximum profit margin per grid
        runPx:
          type: string
          description: Price at launch
        totalPnl:
          type: string
          description: Total P&L
        pnlRatio:
          type: string
          description: P&L ratio
        investment:
          type: string
          description: Accumulated investment amount
        gridProfit:
          type: string
          description: Grid profit
        floatProfit:
          type: string
          description: Variable P&L
        totalAnnualizedRate:
          type: string
          description: Total annualized rate
        annualizedRate:
          type: string
          description: Grid annualized rate
        cancelType:
          type: string
          description: Algo order stop reason
        direction:
          type: string
          description: Contract grid type
        basePos:
          type: boolean
          description: Whether to open a position when the strategy is activated
        sz:
          type: string
          description: Used margin based on USDT
        lever:
          type: string
          description: Leverage
        actualLever:
          type: string
          description: Actual Leverage
        liqPx:
          type: string
          description: Estimated liquidation price
        ordFrozen:
          type: string
          description: Margin used by pending orders
        availEq:
          type: string
          description: Available margin
        eq:
          type: string
          description: Total equity of strategy account
        activeOrdNum:
          type: string
          description: Total count of pending sub orders
        tag:
          type: string
          description: Order tag
        profitSharingRatio:
          type: string
          description: Profit sharing ratio
        copyType:
          type: string
          description: Profit sharing order type
        tpRatio:
          type: string
          description: Take profit ratio
        slRatio:
          type: string
          description: Stop loss ratio
        fee:
          type: string
          description: Accumulated fee
        fundingFee:
          type: string
          description: Accumulated funding fee
        pTime:
          type: string
          format: date-time
          description: Push time of algo grid information
    AlgoArg:
      type: "object"
      description: "Successfully subscribed channel details."
      properties:
        channel:
          type: "string"
          description: "Channel name."
        uid:
          type: "string"
          description: "User Identifier."
        algoId:
          type: "string"
          description: "Algo Order ID."
    GridPositionPushResponse:
      type: "object"
      properties:
        arg:
          $ref: "#/components/schemas/AlgoArg"
        data:
          type: "array"
          description: "Subscribed data array containing algo order details."
          items:
            $ref: "#/components/schemas/GridItems"
    GridItems:
      type: "object"
      properties:
        algoId:
          type: "string"
          description: "Algo ID."
        algoClOrdId:
          type: "string"
          description: "Client-supplied Algo ID."
        instType:
          type: "string"
          description: "Instrument type."
        instId:
          type: "string"
          description: "Instrument ID."
        cTime:
          type: "string"
          description: "Algo order creation time (Unix timestamp in ms)."
        uTime:
          type: "string"
          description: "Algo order last update time (Unix timestamp in ms)."
        avgPx:
          type: "string"
          description: "Average open price."
        ccy:
          type: "string"
          description: "Margin currency."
        lever:
          type: "string"
          description: "Leverage applied to the position."
        liqPx:
          type: "string"
          description: "Estimated liquidation price."
        posSide:
          type: "string"
          description: "Position side (e.g., net)."
        pos:
          type: "string"
          description: "Quantity of positions."
        mgnMode:
          type: "string"
          description: "Margin mode (cross or isolated)."
        mgnRatio:
          type: "string"
          description: "Margin ratio."
        imr:
          type: "string"
          description: "Initial margin requirement."
        mmr:
          type: "string"
          description: "Maintenance margin requirement."
        upl:
          type: "string"
          description: "Unrealized profit and loss."
        uplRatio:
          type: "string"
          description: "Unrealized profit and loss ratio."
        last:
          type: "string"
          description: "Latest traded price."
        notionalUsd:
          type: "string"
          description: "Notional value of positions in USD."
        adl:
          type: "string"
          description: "Auto decrease line, divided into 5 levels."
        markPx:
          type: "string"
          description: "Mark price."
        pTime:
          type: "string"
          description: "Push time of positions information (Unix timestamp in ms)."

    GridSuborderPushResponse:
      type: "object"
      properties:
        arg:
          $ref: "#/components/schemas/AlgoArg"
        data:
          type: "array"
          description: "Subscribed data array containing algo order and sub-order details."
          items:
            $ref: "#/components/schemas/GridSuborderData"
    GridSuborderData:
      type: "object"
      properties:
        algoId:
          type: "string"
          description: "Algo ID."
        algoClOrdId:
          type: "string"
          description: "Client-supplied Algo ID."
        instType:
          type: "string"
          description: "Instrument type."
        instId:
          type: "string"
          description: "Instrument ID."
        algoOrdType:
          type: "string"
          description: "Algo order type (grid, contract_grid)."
        groupId:
          type: "string"
          description: "Group ID."
        ordId:
          type: "string"
          description: "Sub order ID."
        cTime:
          type: "string"
          description: "Sub order created time (Unix timestamp in ms)."
        uTime:
          type: "string"
          description: "Sub order last update time (Unix timestamp in ms)."
        tdMode:
          type: "string"
          description: "Sub order trade mode (margin or non-margin)."

        tag:
          type: "string"
          description: "Order tag."
        ordType:
          type: "string"
          description: "Sub order type (market, limit, ioc)."

        sz:
          type: "string"
          description: "Sub order quantity to buy or sell."
        state:
          $ref: "#/components/schemas/stateEnum"
        side:
          type: "string"
          description: "Sub order side (buy/sell)."
        px:
          type: "string"
          description: "Sub order price."
        fee:
          type: "string"
          description: "Sub order fee amount."
        feeCcy:
          type: "string"
          description: "Sub order fee currency."
        rebate:
          type: "string"
          description: "Sub order rebate amount."
        rebateCcy:
          type: "string"
          description: "Sub order rebate currency."
        avgPx:
          type: "string"
          description: "Sub order average filled price."
        accFillSz:
          type: "string"
          description: "Sub order accumulated fill quantity."
        posSide:
          type: "string"
          description: "Sub order position side (net)."
        pnl:
          type: "string"
          description: "Sub order profit and loss."
        ctVal:
          type: "string"
          description: "Contract value (only for FUTURES/SWAP/OPTION)."
        lever:
          type: "string"
          description: "Leverage applied to the sub order."
        pTime:
          type: "string"
          description: "Push time of sub-order information (Unix timestamp in ms)."

    RecurringOrderResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/RecurringOrderArg"
        data:
          type: array
          items:
            $ref: "#/components/schemas/RecurringOrderData"

    CopyTradingResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/CopyTradingArg"
        data:
          type: array
          items:
            $ref: "#/components/schemas/CopyTradingData"

    LeadTradingResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/LeadTradingArg"
        data:
          type: array
          items:
            $ref: "#/components/schemas/LeadTradingData"

    TickersRequest:
      type: object
      properties:
        op:
          type: string

        args:
          type: array
          items:
            $ref: "#/components/schemas/TickersRequestArg"

    TickersResponse:
      type: object
      properties:
        channel:
          type: string
        instId:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/TickersData"

    CandleStickResponse:
      type: object
      properties:
        channel:
          type: string
        instId:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/CandleStickData"

    TradesResponse:
      type: object
      properties:
        channel:
          type: string
        instId:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/TradesData"
    AllTradesResponse:
      type: object
      properties:
        channel:
          type: string
        instId:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/AllTradesData"

    OrderbookResponse:
      type: object
      properties:
        channel:
          type: string
        instId:
          type: string
        action:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/OrderbookData"

    OptionTradesResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/OptionObj"
    OptionObj:
      type: object
      properties:
        channel:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/OptionTradesData"
    InstArgs:
      type: object
      properties:
        channel:
          type: string
        instId:
          type: string
    AuctionResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/InstArgs"
        data:
          type: array
          items:
            $ref: "#/components/schemas/AuctionData"
    SpreadOrderRequest:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/SpreadOrderArg"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SpreadOrderData"

    SpreadOrderResponse:
      type: object
      properties:
        id:
          type: string
        op:
          type: string
        code:
          type: string
        msg:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/SpreadResponseData"

    SpreadAmendOrderRequest:
      type: object
      properties:
        id:
          type: string
        op:
          type: string
        args:
          type: array
          items:
            $ref: "#/components/schemas/SpreadAmendArgs"

    SpreadAmendResponse:
      type: object
      properties:
        id:
          type: string
        op:
          type: string
        code:
          type: string
        msg:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/SpreadResponseData"

    SpreadCancelOrderRequest:
      type: object
      properties:
        id:
          type: string
        op:
          type: string
        args:
          type: array
          items:
            $ref: "#/components/schemas/SpreadCancelArgs"

    SpreadCancelAllRequest:
      type: object
      properties:
        id:
          type: string
        op:
          type: string
        args:
          type: array
          items:
            $ref: "#/components/schemas/SpreadCancelAllArgs"

    SpreadCancelAllResponse:
      type: object
      properties:
        id:
          type: string
        op:
          type: string
        code:
          type: string
        msg:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/CancelData"
    CancelData:
      type: object
      properties:
        result:
          type: boolean

    OrderChannelRequest:
      type: object
      properties:
        op:
          type: string
        args:
          type: array
          items:
            $ref: "#/components/schemas/OrderChannelArgs"

    OrderChannelResponse:
      type: object
      properties:
        event:
          type: string

        arg:
          $ref: "#/components/schemas/OrderChannelDetails"
        code:
          type: string
        msg:
          type: string
        connId:
          type: string

    OrderChannelPushResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/OrderChannelDetails"
        data:
          type: array
          items:
            $ref: "#/components/schemas/OrderChannelPushData"

    TradeChannelPushResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/OrderChannelDetails"
        data:
          type: array
          items:
            $ref: "#/components/schemas/TradeChannelPushData"

    OrderbookChannelPushResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/OrderChannelDetails"
        action:
          type: string

        data:
          type: array
          items:
            $ref: "#/components/schemas/OrderbookChannelPushData"

    PublicTradePushResponse:
      type: object
      proeprties:
        arg:
          $ref: "#/components/schemas/SprdArg"
        data:
          type: array
          items:
            $ref: "#/components/schemas/TradeData"
    PublicTickersPushResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/SprdArg"
        data:
          type: array
          items:
            $ref: "#/components/schemas/TickerData"
    PublicCandlestickPushResponse:
      type: object
      properties:
        arg:
          $ref: "#/components/schemas/SprdArg"
        data:
          type: array
          items:
            $ref: "#/components/schemas/CandlestickData"
    InstrumentRequest:
      type: object
      properties:
        op:
          type: string
          description: The operation type, either `subscribe` or `unsubscribe`.
        args:
          type: array
          items:
            $ref: "#/components/schemas/InstrumentArgs"
    InstrumentPushResponse:
      type: object
      properties:
        channel:
          type: string
          description: The name of the subscribed channel.
        instType:
          type: string
          description: The instrument type.
        data:
          type: array
          items:
            $ref: "#/components/schemas/InstrumentData"

    OpenInterestPushResponse:
      type: object
      properties:
        channel:
          type: string
          description: The name of the subscribed channel.
        instId:
          type: string
          description: Instrument ID (e.g., LTC-USD-SWAP).
        data:
          type: array
          items:
            $ref: "#/components/schemas/OpenInterestData"
    FundingratePushResponse:
      type: object
      properties:
        channel:
          type: string
          description: The name of the subscribed channel.
        instId:
          type: string
          description: Instrument ID (e.g., BTC-USD-SWAP).
        data:
          type: array
          items:
            $ref: "#/components/schemas/FundingRateData"
    PriceLimitPushResponse:
      type: object
      properties:
        channel:
          type: string
          description: The name of the subscribed channel.
        instId:
          type: string
          description: Instrument ID (e.g., BTC-USDT).
        data:
          type: array
          items:
            $ref: "#/components/schemas/PriceLimitData"
    OptionPushResponse:
      type: object
      properties:
        channel:
          type: string
          description: The name of the subscribed channel.
        instFamily:
          type: string
          description: The instrument family (e.g., BTC-USD).
        data:
          type: array
          items:
            $ref: "#/components/schemas/OptionData"

    PricePushResponse:
      type: object
      properties:
        channel:
          type: string
          description: The name of the subscribed channel.
        instType:
          $ref: "#/components/schemas/instTypeEnum"
        instFamily:
          type: string
          description: The instrument family (e.g., BTC-USD).
        data:
          type: array
          items:
            $ref: "#/components/schemas/PriceData"
    MarkPricePushResponse:
      type: object
      properties:
        channel:
          type: string
          description: The name of the subscribed channel.
        instType:
          $ref: "#/components/schemas/instTypeEnum"
        data:
          type: array
          items:
            $ref: "#/components/schemas/MarkPriceData"
    LiquidationResponse:
      type: object
      properties:
        channel:
          type: string
          description: The name of the subscribed channel.
        instType:
          $ref: "#/components/schemas/instTypeEnum"
        data:
          type: array
          items:
            $ref: "#/components/schemas/LiquidationData"
    ADLResponse:
      type: object
      properties:
        channel:
          type: string
          description: The name of the subscribed channel (e.g., adl-warning).
        instType:
          type: string
          description: The type of instrument (e.g., FUTURES, SWAP, OPTION).
        instFamily:
          type: string
          description: The instrument family (e.g., BTC, ETH).
        data:
          type: array
          items:
            $ref: "#/components/schemas/ADLData"
    CalendarRequest:
      type: object
      properties:
        op:
          type: string
          description: Operation type. Either `subscribe` or `unsubscribe`.
          example: "subscribe"
        args:
          type: array
          description: List of subscribed channels.
          items:
            $ref: "#/components/schemas/CalendarRequestArgs"

    CalendarPushResponse:
      type: object
      properties:
        channel:
          type: string
          description: The name of the subscribed channel (e.g., economic events).
        data:
          type: array
          items:
            $ref: "#/components/schemas/CalendarPushData"
    DepositRequest:
      type: object
      properties:
        op:
          type: string
          description: The operation to perform (subscribe or unsubscribe).
        args:
          type: array
          items:
            $ref: "#/components/schemas/DepositRequestArgs"
    DepositPushResponse:
      payload:
        $ref: "#/components/schemas/DepositPushData"
    WithdrawPushResponse:
      payload:
        $ref: "#/components/schemas/WithdrawPushData"
